import{M as L,h as u,e as P,z as c}from"./main.js";const B=L("patient",()=>{const r=u([]),l=u(null),i=u(null),h=u([]),v=u([]),s=u(!1),a=u(null),y=P(()=>r.value.length),f=P(()=>r.value.map(e=>({...e,age:e.dob?g(e.dob):null}))),w=P(()=>r.value.map(e=>({...e,displayName:`${e.firstName||""} ${e.lastName||""} (ID: ${e.id})`.trim()}))),b=async()=>{try{s.value=!0,a.value=null;const e=await c.get("/api/patients/");r.value=e.data.results||e.data}catch(e){a.value="Fehler beim Laden der Patienten: "+(e.response?.data?.detail||e.message),console.error("Fetch patients error:",e)}finally{s.value=!1}},p=async()=>{try{const e=await c.get("/api/genders/");h.value=e.data.results||e.data}catch(e){console.error("Fetch genders error:",e),a.value="Fehler beim Laden der Geschlechter"}},m=async()=>{try{const e=await c.get("/api/centers/");v.value=e.data.results||e.data}catch(e){console.error("Fetch centers error:",e),a.value="Fehler beim Laden der Zentren"}},F=async()=>{await Promise.all([p(),m()])},C=async e=>{try{s.value=!0,a.value=null;const n=(await c.post("/api/patients/",e)).data;return r.value.push(n),n}catch(t){throw a.value=t.response?.data?.detail||"Fehler beim Erstellen des Patienten",t}finally{s.value=!1}},I=async(e,t)=>{try{s.value=!0,a.value=null;const o=(await c.put(`/api/patients/${e}/`,t)).data,d=r.value.findIndex(k=>k.id===e);return d!==-1&&(r.value[d]=o),o}catch(n){throw a.value=n.response?.data?.detail||"Fehler beim Aktualisieren des Patienten",n}finally{s.value=!1}},N=async e=>{try{s.value=!0,a.value=null,await c.delete(`/api/patients/${e}/`),r.value=r.value.filter(t=>t.id!==e)}catch(t){throw a.value=t.response?.data?.detail||"Fehler beim Löschen des Patienten",t}finally{s.value=!1}},S=e=>r.value.find(t=>t.id===e),G=()=>{a.value=null},g=e=>{if(!e)return null;try{const t=new Date(e),n=new Date;let o=n.getFullYear()-t.getFullYear();const d=n.getMonth()-t.getMonth();return(d<0||d===0&&n.getDate()<t.getDate())&&o--,o}catch{return null}};return{patients:r,currentPatient:l,selectedPatientId:i,genders:h,centers:v,loading:s,error:a,patientCount:y,patientsWithAge:f,patientsWithDisplayName:w,fetchPatients:b,fetchGenders:p,fetchCenters:m,loadGenders:async()=>{await p()},loadCenters:async()=>{await m()},initializeLookupData:F,createPatient:C,updatePatient:I,deletePatient:N,clearError:G,getPatientById:S,calculatePatientAge:g,getGenderDisplayName:e=>{if(!e)return"Unbekannt";const t=h.value.find(n=>n.name===e);return t?.nameDe||t?.name||e},getCenterDisplayName:e=>{if(!e)return"Kein Zentrum";const t=v.value.find(n=>n.name===e);return t?.nameDe||t?.name||e},validatePatientForm:e=>{const t=[];return e.firstName?.trim()||t.push("Vorname ist erforderlich"),e.lastName?.trim()||t.push("Nachname ist erforderlich"),e.dob&&new Date(e.dob)>new Date&&t.push("Geburtsdatum kann nicht in der Zukunft liegen"),e.email&&!e.email.includes("@")&&t.push("Ungültige E-Mail-Adresse"),{isValid:t.length===0,errors:t}},formatPatientForSubmission:e=>({id:e.id,firstName:e.firstName?.trim(),lastName:e.lastName?.trim(),dob:e.dob||null,gender:e.gender||null,center:e.center||null,email:e.email?.trim()||"",phone:e.phone?.trim()||"",patientHash:e.patientHash?.trim()||"",comments:e.comments?.trim()||"",isRealPerson:e.isRealPerson??!0}),clearCurrentPatient:()=>{l.value=null},getCurrentPatient:()=>l.value,setSelectedPatientId:e=>{i.value=e},getSelectedPatientId:()=>i.value,clearSelectedPatientId:()=>{i.value=null},setCurrentPatient:e=>{l.value=e},resolveCurrentPatientId:(e,t=!0)=>{const n=(e&&e>0?e:null)??(l.value?.id&&l.value.id>0?l.value.id:null)??(i.value&&i.value>0?i.value:null);if(t&&!n)throw new Error("Kein Patient ausgewählt – patientId konnte nicht ermittelt werden.");return n}}});export{B as u};
