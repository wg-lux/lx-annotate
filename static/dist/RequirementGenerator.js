import{M as re,z as A,h as F,e as D,P as J,f as Ie,d as xe,i as _e,w as U,c as u,a as e,j as B,k as T,t as p,F as H,m as G,o as d,_ as qe,G as ye,C as W,l as me,T as Ce,p as Be,K as Me,n as ie,v as $e,b as Pe,x as Oe}from"./main.js";import{u as Re}from"./patientStore.js";import{P as He}from"./PatientAdder2.js";const fe=re("examination",{state:()=>({loading:!1,error:null,exams:[],selectedExaminationId:null,findingsByExam:new Map,classificationsByFinding:new Map}),getters:{examinations(i){return i.exams},examinationsDropdown(i){return i.exams.map(a=>({id:a.id,name:a.name,displayName:a.displayName??a.name_de??a.name}))},selectedExamination(i){return i.exams.find(a=>a.id===i.selectedExaminationId)??null},availableFindings(i){const a=i.selectedExaminationId;return a?i.findingsByExam.get(a)??[]:[]}},actions:{setSelectedExamination(i){this.selectedExaminationId=i},async fetchExaminations(){this.loading=!0,this.error=null;try{const i=await A.get("/api/examinations/");this.exams=i.data.map(a=>({id:a.id,name:a.name,name_de:a.name_de,name_en:a.name_en,displayName:a.displayName??a.name_de??a.name_en??a.name}))}catch(i){this.error=i?.response?.data?.detail??i?.message??"Unbekannter Fehler"}finally{this.loading=!1}},async loadFindingsForExamination(i){if(!i)return[];this.loading=!0,this.error=null;try{const m=(await A.get(`/api/examinations/${i}/findings/`)).data;return this.findingsByExam.set(i,m),m}catch(a){return this.error=a?.response?.data?.detail??a?.message??"Unbekannter Fehler",[]}finally{this.loading=!1}},async getCurrentExaminationId(){return this.selectedExaminationId?this.selectedExaminationId:(await this.fetchExaminations(),this.selectedExaminationId)},async loadFindingClassifications(i){this.loading=!0,this.error=null;try{const m=(await A.get(`/api/findings/${i}/classifications/`)).data;return this.classificationsByFinding.set(i,m),m}catch(a){return this.error=a?.response?.data?.detail??a?.message??"Unbekannter Fehler",{locationClassifications:[],morphologyClassifications:[]}}finally{this.loading=!1}}}}),Ee=re("finding",()=>{const i=F([]),a=F(!1),m=F(null),I=F(null),$=F([]),C=F(new Map),b=F(new Map);fe();const L=async()=>{try{a.value=!0,m.value=null;const h=await A.get("/api/findings/");i.value=h.data.results||h.data}catch(h){m.value="Fehler beim Laden der Befunde: "+(h.response?.data?.detail||h.message),console.error("Fetch findings error:",h)}finally{a.value=!1}},_=async h=>{try{return(await A.get(`/api/findings/${h}/classifications/`)).data}catch(E){throw console.error(`Error fetching classifications for finding ${h}:`,E),E}},l=async h=>{try{if(C.value.has(h))return C.value.get(h);b.value.set(h,!0);const M=(await A.get(`/api/examinations/${h}/findings/`)).data;return C.value.set(h,M),M}catch(E){throw console.error(`Error fetching findings for examination ${h}:`,E),E}finally{b.value.set(h,!1)}},o=async h=>{if(!h)return[];try{a.value=!0,m.value=null;const E=await A.get(`/api/patient-examinations/${h}/findings/`);return i.value=E.data.results||E.data,i.value}catch(E){return m.value="Fehler beim Laden der Befunde für die Patientenuntersuchung: "+(E.response?.data?.detail||E.message),console.error("Fetch findings by patient examination error:",E),[]}finally{a.value=!1}},v=async h=>{try{return(await A.get(`/api/examinations/${h}/classifications/`)).data}catch(E){throw console.error(`Error fetching classifications for examination ${h}:`,E),E}},w=h=>i.value.find(E=>E.id===h),z=h=>{I.value=h},q=D(()=>i.value.length>0),S=h=>C.value.has(h)?(console.log("Using cached findings for examination",h),C.value.get(h)):(console.log("No cached findings for examination",h),console.log("Using the following findings:"),i.value.filter(E=>(console.log(E),E.examinations&&E.examinations.includes(h.toString())))),x=h=>{const E=[];for(const M of i.value)M.PatientExaminationId===h&&E.push(M.id);return E},R=h=>C.value.has(h),K=h=>b.value.get(h)||!1,Z=h=>{h?(C.value.delete(h),b.value.delete(h)):(C.value.clear(),b.value.clear())};return{findings:J(i),FindingClassification:$,loading:J(a),error:J(m),currentFinding:J(I),examinationFindings:J(C),areFindingsLoaded:q,fetchFindings:L,fetchFindingClassifications:_,fetchFindingsByExamination:l,fetchExaminationClassifications:v,getFindingsByExamination:S,getFindingById:w,getFindingIdsByPatientExaminationId:x,setCurrentFinding:z,isExaminationFindingsLoaded:R,isExaminationFindingsLoading:K,clearExaminationFindingsCache:Z,fetchFindingsByPatientExamination:o}}),Ge=re("requirement",()=>{const i=F([]),a=F(!1),m=F(null),I=F(null),$=F({}),C=F([]),b=r=>{I.value=r,C.value=r?[r.id]:[]},L=r=>{C.value=r,r.length!==1?I.value=null:I.value=E(r[0])||null},_=r=>{i.value=i.value.filter(k=>k.id!==r),I.value?.id===r&&(I.value=null,C.value=[]),delete $.value[r]},l=D(()=>i.value.every(r=>r.met)),o=D(()=>I.value?I.value.met:!1),v=D(()=>i.value.reduce((r,k)=>r+k.requirements.filter(y=>y.met).length,0)),w=D(()=>i.value.reduce((r,k)=>r+k.requirements.length,0)),z=async()=>{try{a.value=!0,m.value=null;const r=await A.get("/api/requirement-sets/");i.value=r.data.results||r.data}catch(r){m.value="Fehler beim Laden der Anforderungssätze: "+(r.response?.data?.detail||r.message),console.error("Fetch requirement sets error:",r)}finally{a.value=!1}},q=async r=>{try{return(await A.get(`/api/requirement-sets/${r}/`)).data}catch(k){return console.error(`Error fetching requirement set ${r}:`,k),null}},S=async(r,k)=>{try{a.value=!0,m.value=null;const y={requirement_set_ids:r,patient_examination_id:k};k&&(y.patient_examination_id=k),r?y.requirementSetIds=r:y.requirementSetIds=i.value.map(s=>s.id);const c=(await A.post("/api/evaluate-requirements/",y)).data.results||[];if(c.length>0){const s=Ie(),g=c.filter(N=>!N.met);g.length>0?s.warning({text:`${g.length} von ${c.length} Anforderungen nicht erfüllt. Überprüfen Sie die Patientendaten.`,timeout:5e3}):s.success({text:`Alle ${c.length} Anforderungen erfolgreich erfüllt!`,timeout:3e3})}return r?r.forEach(s=>{$.value[s]=c.filter(g=>i.value.find(N=>N.id===s)?.requirements.some(N=>N.name===g.requirement_name))}):c.forEach(s=>{const g=i.value.find(N=>N.requirements.some(se=>se.name===s.requirement_name))?.id;g&&($.value[g]||($.value[g]=[]),$.value[g].push(s))}),R(c),c}catch(y){throw m.value="Fehler bei der Evaluierung der Anforderungen: "+(y.response?.data?.detail||y.message),console.error("Evaluate requirements error:",y),Ie().error({text:"Fehler bei der Anforderungsevaluierung: "+(y.response?.data?.detail||y.message),timeout:5e3}),y}finally{a.value=!1}},x=async(r,k)=>{try{a.value=!0,m.value=null;const y=C.value.length>0?C.value:[r];r.valueOf.length>0&&y.push(r);const P={requirement_set_ids:y,patient_examination_id:k};k&&(P.patient_examination_id=k);const s=(await A.post("/api/evaluate-requirement-set/",P)).data.results||[];return $.value[r]=s,R(s),s}catch(y){throw m.value="Fehler bei der Evaluierung des Anforderungssatzes: "+(y.response?.data?.detail||y.message),console.error("Evaluate requirement set error:",y),y}finally{a.value=!1}},R=r=>{if(i.value.forEach(k=>{k.requirements.forEach(y=>{const P=r.find(c=>c.requirement_name===y.name);P&&(y.met=P.met,y.details=P.details)}),k.met=k.requirements.every(y=>y.met)}),I.value){const k=r.filter(y=>I.value.requirements.some(P=>P.name===y.requirement_name));I.value.requirements.forEach(y=>{const P=k.find(c=>c.requirement_name===y.name);P&&(y.met=P.met,y.details=P.details)}),I.value.met=I.value.requirements.every(y=>y.met)}},K=r=>({examinations:r.patientExaminationId?[r.patientExaminationId]:[],findings:r.availableFindings||[],finding_classifications:r.findingClassifications||[],examination_indications:r.examinationIndications||[],indication_choices:r.indicationChoices||[],lab_values:r.labValues||[],diseases:r.diseases||[],disease_classification_choices:r.diseaseClassificationChoices||[],events:r.events||[],medications:r.medications||[],medication_indications:r.medicationIndications||[],medication_intake_times:r.medicationIntakeTimes||[],medication_schedules:r.medicationSchedules||[],genders:r.genders||[]}),Z=async(r,k)=>{const y=r.patientExaminationId;return await S(k,y)},h=async r=>{if(!I.value)throw new Error("No current requirement set selected");const k=r.patientExaminationId;return await x(I.value.id,k)},E=r=>i.value.find(k=>k.id===r);return{requirementSets:i,currentRequirementSet:I,evaluationResults:$,loading:a,error:m,isRequirementValidated:l,isRequirementSetValidated:o,metRequirementsCount:v,totalRequirementsCount:w,setCurrentRequirementSet:b,fetchRequirementSets:z,fetchRequirementSet:q,evaluateRequirements:S,evaluateRequirementSet:x,evaluateFromLookupData:Z,evaluateCurrentSetFromLookupData:h,createRequirementLinksFromLookup:K,getRequirementSetById:E,getRequirementById:(r,k)=>E(r)?.requirements.find(P=>P.id===k),getRequirementSetEvaluationStatus:r=>{const k=E(r);if(!k)return null;const y=k.requirements.filter(c=>c.met).length,P=k.requirements.length;return{met:k.met,metRequirementsCount:y,totalRequirementsCount:P,completionPercentage:P>0?Math.round(y/P*100):0}},getRequirementEvaluationStatus:r=>{for(const k of i.value){const y=k.requirements.find(P=>P.id===r);if(y)return{met:y.met,details:y.details}}return null},loadRequirementSetsFromLookup:r=>{if(!r.requirementsBySet)return;const k=[];Object.entries(r.requirementsBySet).forEach(([y,P])=>{const c=r.requirementSets?.find(s=>s.id===parseInt(y));c&&k.push({id:parseInt(y),name:c.name,description:c.description,type:c.type,requirements:P.map(s=>({id:s.id,name:s.name,description:s.description,met:r.requirementStatus?.[s.id]||!1,details:null})),met:r.requirementSetStatus?.[y]||!1})}),i.value=k},clearError:()=>{m.value=null},setCurrentRequirementSetIds:L,deleteRequirementSetById:_,reset:()=>{i.value=[],I.value=null,$.value={},m.value=null}}}),Le=re("patientExamination",{state:()=>({loading:!1,error:null,patientExaminations:[],selectedPatientExaminationId:null}),getters:{getPatientExaminationById:i=>a=>i.patientExaminations.find(m=>m.id===a)||null,isLoading:i=>i.loading,getError:i=>i.error,getAllPatientExaminations:i=>i.patientExaminations,getSelectedPatientExaminationId:i=>i.selectedPatientExaminationId},actions:{async doesPatientExaminationExist(i){try{this.loading=!0,this.error=null;const a=await A.get(`/api/check_pe_exist/${i}/`);return a.status===200&&typeof a.data.exists=="boolean"?a.data.exists:!0}catch(a){return this.error="Fehler beim Überprüfen der Patientenuntersuchung: "+(a.response?.data?.detail||a.message),console.error("Check patient examination existence error:",a),!1}finally{this.loading=!1}},async fetchPatientExaminations(i){try{if(this.loading=!0,this.error=null,await this.doesPatientExaminationExist(i)===!1){this.patientExaminations=[];return}const a=await A.get(`/api/patient-examinations/?patient_id=${i}`);this.patientExaminations=a.data.results||a.data}catch(a){this.error="Fehler beim Laden der Patientenuntersuchungen: "+(a.response?.data?.detail||a.message),console.error("Fetch patient examinations error:",a)}finally{this.loading=!1}},async fetchPatientExaminationById(i){try{this.loading=!0,this.error=null;const m=(await A.get(`/api/get_patient_examination/${i}/`)).data;if(m){const I=this.patientExaminations.findIndex($=>$.id===m.id);I!==-1?this.patientExaminations[I]=m:this.patientExaminations.push(m)}}catch(a){this.error="Fehler beim Laden der Patientenuntersuchung: "+(a.response?.data?.detail||a.message),console.error("Fetch patient examination by ID error:",a)}finally{this.loading=!1}},addPatientExamination(i){this.patientExaminations.push(i)},removePatientExamination(i){this.patientExaminations=this.patientExaminations.filter(a=>a.id!==i),this.selectedPatientExaminationId===i&&(this.selectedPatientExaminationId=null)},setCurrentPatientExaminationId(i){this.selectedPatientExaminationId=i},getCurrentPatientExaminationId(){return this.selectedPatientExaminationId},getCurrentPatientExaminationExaminationId(){const i=this.patientExaminations.find(a=>a.id===this.selectedPatientExaminationId);return i?i.examination.id:null}}}),Ae=re("findingsClassificationStore",()=>{const i=F({}),a=F(!1),m=F(null),I=o=>{const v=i.value[o];return v?[...v.classifications||[],...v.location_classifications||[],...v.morphology_classifications||[]]:[]},$=D(()=>Object.values(i.value)),C=o=>(i.value[o]||$.value,i.value[o]),b=()=>{i.value={},m.value=null},L=o=>{m.value=o},_=o=>{a.value=o},l=o=>{const v={};o.forEach(w=>{v[w.id]=w}),i.value=v,console.log("📋 [FindingsClassificationStore] Set findings from lookup:",Object.keys(v).length,"findings")};return{findings:J(i),loading:J(a),error:J(m),getFindingById:C,getClassificationsForFinding:I,getAllFindings:$,clearFindings:b,setError:L,setLoading:_,setClassificationChoicesFromLookup:l}}),Je={class:"finding-card card mb-3"},Ve={class:"card-body"},We={key:0,class:"text-center"},Ye={key:1,class:"text-center text-muted"},Xe={class:"row mb-3"},Qe={class:"col-md-6"},Ze={class:"col-md-6"},et={class:"text-muted"},tt={class:"col-md-6"},nt={class:"col-md-6"},it={key:0},at={key:1},st={class:"col-md-6"},lt={key:0,class:"mb-3"},ot={class:"classification-list"},rt={class:"d-flex justify-content-between align-items-center"},dt={key:0,class:"text-muted small"},ut={key:1,class:"mb-2"},ct={class:"d-flex flex-wrap gap-1 mt-1"},gt={key:2,class:"mb-2"},mt={class:"d-flex flex-wrap gap-1 mt-1"},ft={key:2},vt={key:0,class:"selected-classifications-summary mt-3 p-3 bg-light rounded"},pt={class:"mb-2"},ht={class:"row"},bt={class:"d-flex justify-content-between align-items-center"},yt={class:"text-muted"},xt={key:1,class:"mt-3 p-2 bg-light border rounded"},_t={class:"text-muted"},Et=xe({__name:"FindingsDetail",props:{findingId:{},isAddedToExamination:{type:Boolean,default:!1},patientExaminationId:{default:void 0}},emits:["added-to-examination","classification-updated","error-occurred"],setup(i,{emit:a}){const m=Ee(),I=fe(),$=Ae(),C=D(()=>I.selectedExaminationId||void 0),b=i,L=F(!1),_=F([]),l=D(()=>{const S=$.getFindingById(b.findingId);return S||m.getFindingById(b.findingId)}),o=D(()=>_.value.filter(S=>S.required)),v=D(()=>{const S=$.getFindingById(b.findingId),x=m.getFindingById(b.findingId),R=S?"findingClassificationStore":x?"findingStore":"none";return{findingId:b.findingId,findingName:l.value?.nameDe||l.value?.name,totalClassifications:_.value.length,requiredClassifications:o.value.length,classificationsLoaded:_.value.length>0,dataSource:R}}),w=D(()=>{const S=$.getFindingById(b.findingId),x=m.getFindingById(b.findingId),R=S?"findingClassificationStore":x?"findingStore":"none";return{findingId:b.findingId,findingName:l.value?.nameDe||l.value?.name,findingDescription:l.value?.description||"Keine Beschreibung verfügbar",totalClassifications:_.value.length,requiredClassifications:o.value.length,classificationsLoaded:_.value.length>0,dataSource:R}}),z=async()=>{if(!b.findingId){console.log("📋 [FindingsDetail] No findingId provided, skipping classifications load");return}try{L.value=!0;const S=$.getClassificationsForFinding(b.findingId);if(S.length>0)_.value=S,console.log("📋 [FindingsDetail] Loaded classifications from store:",S.length);else{const x=$.getFindingById(b.findingId);x?.FindingClassifications?(_.value=x.FindingClassifications,console.log("📋 [FindingsDetail] Loaded classifications from finding data:",x.FindingClassifications.length)):(console.warn("📋 [FindingsDetail] No classifications found for finding:",b.findingId),_.value=[])}}catch(S){console.error("Error loading classifications:",S),_.value=[]}finally{L.value=!1}},q=async()=>{await z()};return _e(()=>{console.log("🚀 [FindingsDetail] Component mounted with props:",{findingId:b.findingId,patientExaminationId:b.patientExaminationId,isAddedToExamination:b.isAddedToExamination,findingStoreFindingsCount:m.findings.length,findingFromStore:m.getFindingById(b.findingId)}),q()}),U(()=>b.findingId,(S,x)=>{console.log("👀 [FindingsDetail] findingId changed:",{oldVal:x,newVal:S}),q()},{immediate:!0}),U(()=>$.getFindingById(b.findingId),(S,x)=>{S&&(console.log("🔄 [FindingsDetail] Finding data now available in findingClassificationStore, loading classifications",{findingId:S.id}),z())},{immediate:!0}),U(()=>m.findings,(S,x)=>{console.log("📊 [FindingsDetail] findingStore.findings changed:",{oldCount:x?.length||0,newCount:S?.length||0,findingId:b.findingId}),S&&S.length>0&&(console.log("🔄 [FindingsDetail] Reloading classifications due to findings data change"),q())},{immediate:!0}),(S,x)=>(d(),u("div",Je,[e("div",Ve,[L.value?(d(),u("div",We,[...x[0]||(x[0]=[e("div",{class:"spinner-border spinner-border-sm",role:"status"},[e("span",{class:"visually-hidden"},"Loading...")],-1),T(" Lade Details... ",-1)])])):!L.value&&l.value?(d(),u("div",Ye,[e("div",Xe,[e("div",Qe,[e("p",null,[x[1]||(x[1]=e("strong",null,"ID:",-1)),T(" "+p(l.value.id),1)]),e("p",null,[x[2]||(x[2]=e("strong",null,"Name (DE):",-1)),T(" "+p(w.value.findingName||"N/A"),1)])]),e("div",Ze,[x[3]||(x[3]=e("p",null,[e("strong",null,"Beschreibung:")],-1)),e("p",et,p(w.value.findingDescription||"Keine Beschreibung verfügbar"),1)]),e("div",tt,[e("p",null,[x[4]||(x[4]=e("strong",null,"Data Source:",-1)),T(" "+p(w.value.dataSource),1)])]),e("div",nt,[e("p",null,[x[5]||(x[5]=e("strong",null,"Klassifikationen gesamt:",-1)),T(" "+p(w.value.totalClassifications)+" ("+p(w.value.requiredClassifications)+" erforderlich)",1)]),w.value.classificationsLoaded?(d(),u("p",it,"Die Klassifikationen wurden erfolgreich geladen.")):(d(),u("p",at,"Die Klassifikationen konnten nicht geladen werden."))]),e("div",st,[e("p",null,[x[6]||(x[6]=e("strong",null,"Erforderliche Klassifikationen:",-1)),T(" "+p(w.value.requiredClassifications),1)])])]),o.value.length>0?(d(),u("div",lt,[x[8]||(x[8]=e("h6",null,"Erforderliche Klassifikationen:",-1)),e("div",ot,[(d(!0),u(H,null,G(o.value,R=>(d(),u("div",{key:R.id,class:"classification-item mb-2 p-2 border rounded bg-light"},[e("div",rt,[e("div",null,[e("strong",null,p(R.name),1),R.description?(d(),u("div",dt,p(R.description),1)):B("",!0)]),x[7]||(x[7]=e("div",{class:"badge bg-warning"},"Erforderlich",-1))])]))),128))])])):B("",!0),l.value.findingTypes&&l.value.findingTypes.length?(d(),u("div",ut,[x[9]||(x[9]=e("strong",null,"Typen:",-1)),e("div",ct,[(d(!0),u(H,null,G(l.value.findingTypes,R=>(d(),u("span",{key:R,class:"badge bg-secondary"},p(R),1))),128))])])):B("",!0),l.value.findingInterventions&&l.value.findingInterventions.length?(d(),u("div",gt,[x[10]||(x[10]=e("strong",null,"Interventionen:",-1)),e("div",mt,[(d(!0),u(H,null,G(l.value.findingInterventions,R=>(d(),u("span",{key:R,class:"badge bg-info"},p(R),1))),128))])])):B("",!0)])):(d(),u("div",ft,[x[11]||(x[11]=e("p",null,"Befunde konnten nicht geladen werden...",-1)),e("small",null,"Finding ID: "+p(i.findingId),1),C.value?(d(),u("button",{key:0,class:"btn btn-primary mt-2",onClick:q},"Erneut versuchen")):B("",!0)]))]),o.value.length>0?(d(),u("div",vt,[e("h6",pt,[x[12]||(x[12]=e("i",{class:"fas fa-list-check"},null,-1)),T(" Erforderliche Klassifikationen ("+p(o.value.length)+") ",1)]),e("div",ht,[(d(!0),u(H,null,G(o.value,R=>(d(),u("div",{key:R.id,class:"col-md-6 mb-2"},[e("div",bt,[e("small",yt,p(R.name)+":",1),x[13]||(x[13]=e("span",{class:"badge bg-warning"},"Erforderlich",-1))])]))),128))])])):B("",!0),v.value.findingId?(d(),u("div",xt,[x[14]||(x[14]=e("h6",{class:"mb-2"},"🐛 Debug Info:",-1)),e("small",_t,[e("div",null,"Finding ID: "+p(v.value.findingId),1),e("div",null,"Finding Name: "+p(v.value.findingName||"Not loaded"),1),e("div",null,"Classifications: "+p(v.value.totalClassifications)+" ("+p(v.value.requiredClassifications)+" required)",1),e("div",null,"Classifications Loaded: "+p(v.value.classificationsLoaded),1),e("div",null,"Data Source: "+p(v.value.dataSource),1)])])):B("",!0)]))}}),wt=qe(Et,[["__scopeId","data-v-abc7c9e3"]]),St=re("patientFinding",()=>{const i=F([]),a=F(!1),m=F(null),I=async _=>{if(!_){console.warn("fetchPatientFindings wurde ohne patientExaminationId aufgerufen."),i.value=[];return}try{a.value=!0,m.value=null;const l=await A.get("/api/patient-findings/",{params:{patient_examination:_}});i.value=l.data.results||l.data}catch(l){m.value="Fehler beim Laden der Patientenbefunde: "+(l.response?.data?.detail||l.message),console.error("Fetch patient findings error:",l)}finally{a.value=!1}},$=D(()=>{const l=Re().getCurrentPatient();return l?i.value.filter(o=>o.patient.id===l.id):[]}),C=async _=>{try{a.value=!0,m.value=null;const o=(await A.post("/api/patient-findings/",_)).data;return i.value.push(o),o}catch(l){throw m.value="Fehler beim Erstellen des Patientenbefunds: "+(l.response?.data?.detail||l.message),console.error("Create patient finding error:",l),l}finally{a.value=!1}},b=async(_,l)=>{try{a.value=!0,m.value=null;const v=(await A.patch(`/api/patient-findings/${_}/`,l)).data,w=i.value.findIndex(z=>z.id===_);return w!==-1&&(i.value[w]=v),v}catch(o){throw m.value="Fehler beim Aktualisieren des Patientenbefunds: "+(o.response?.data?.detail||o.message),console.error("Update patient finding error:",o),o}finally{a.value=!1}},L=async _=>{try{a.value=!0,m.value=null,await A.delete(`/api/patient-findings/${_}/`),i.value=i.value.filter(l=>l.id!==_)}catch(l){throw m.value="Fehler beim Löschen des Patientenbefunds: "+(l.response?.data?.detail||l.message),console.error("Delete patient finding error:",l),l}finally{a.value=!1}};return{patientFindings:J(i),patientFindingsByCurrentPatient:$,loading:J(a),error:J(m),fetchPatientFindings:I,createPatientFinding:C,updatePatientFinding:b,deletePatientFinding:L}}),kt={class:"addable-finding-card card mb-3 border-primary"},Ft={class:"card-header d-flex justify-content-between align-items-center bg-light"},It={class:"nav nav-tabs card-header-tabs"},Ct={class:"nav-item"},$t={class:"badge rounded-pill bg-primary ms-1"},Pt={class:"nav-item"},qt={class:"badge rounded-pill bg-success ms-1"},Bt={class:"card-body"},Rt={class:"d-flex justify-content-end mb-3"},Lt=["disabled"],At={key:0,class:"mb-3 finding-selector"},Nt={key:0,class:"text-center py-3 text-muted"},Tt={key:1,class:"row g-3"},Dt=["onClick"],zt={class:"card-body p-3"},Ut={class:"card-title small fw-bold"},Kt={key:0,class:"card-text small text-muted mb-0"},jt={key:1,class:"selected-finding-config mt-4 p-4 border rounded bg-light"},Mt={class:"d-flex justify-content-between align-items-center mb-3"},Ot={class:"mb-0"},Ht={key:0,class:"mb-3"},Gt={class:"classification-config-list"},Jt={class:"d-flex justify-content-between align-items-center mb-2"},Vt={class:"d-flex align-items-center gap-2"},Wt={key:0,class:"badge bg-warning text-dark",title:"Erforderlich"},Yt={key:1,class:"badge bg-success",title:"Ausgewählt"},Xt={key:0,class:"text-muted small mb-2"},Qt=["value","onChange"],Zt={key:0,value:"",disabled:""},en=["value"],tn={class:"classification-progress"},nn={class:"d-flex justify-content-between align-items-center mb-1"},an={class:"progress",style:{height:"6px"}},sn={class:"text-end mt-3"},ln=["disabled","title"],on={key:0,class:"spinner-border spinner-border-sm me-2"},rn={key:2,class:"text-center py-5 text-muted"},dn={key:0,class:"text-center py-5 text-muted"},un={key:1,class:"row g-3"},cn={class:"card h-100 border-success"},gn={class:"card-body p-3"},mn={class:"d-flex align-items-start gap-2"},fn={class:"flex-grow-1"},vn={class:"card-title small fw-bold text-success"},pn={key:0,class:"card-text small text-muted mb-2"},hn={class:"badge bg-info text-dark small"},bn=xe({__name:"AddableFindingsDetail",props:{patientExaminationId:{default:void 0},examinationId:{default:void 0}},emits:["finding-added","finding-error"],setup(i,{emit:a}){const m=Le(),I=Ae(),$=m.getCurrentPatientExaminationId();m.setCurrentPatientExaminationId($);const C=i;U(()=>m.getCurrentPatientExaminationId(),c=>{c&&!C.patientExaminationId&&(console.warn("[AddableFindingsDetail] Syncing patientExaminationId..."),P())},{immediate:!0});const b=a,L=Ee(),_=St(),l=fe(),o=F(!1),v=F("available"),w=F(!1),z=F(null),q=F([]),S=F({}),x=F([]),R=F([]),K=D(()=>x.value);D(async()=>{const c=m.getCurrentPatientExaminationId();return c?await L.fetchFindingsByPatientExamination(c)||[]:[]});async function Z(){const c=m.getCurrentPatientExaminationId();if(!c){R.value=[];return}await _.fetchPatientFindings(c),R.value=_.patientFindings.map(s=>JSON.parse(JSON.stringify(s.finding)))}U(()=>m.getCurrentPatientExaminationId(),async c=>{c&&await Z()},{immediate:!0});const h=D(()=>{if(z.value)return K.value.find(c=>c.id===z.value)||I.getFindingById(z.value)}),E=D(()=>q.value.length?q.value.filter(c=>c.required).every(c=>S.value[c.id]):!0),M=D(()=>z.value&&E.value&&C.patientExaminationId&&!o.value),O=D(()=>{const c=q.value.filter(g=>g.required).length,s=q.value.filter(g=>g.required&&S.value[g.id]).length;return{required:c,selected:s,complete:s===c,percentage:c>0?Math.round(s/c*100):100}}),le=async c=>{z.value=c,w.value=!1,await oe(c)},ae=()=>{z.value=null,q.value=[],S.value={}},oe=async c=>{try{o.value=!0,q.value=I.getClassificationsForFinding(c)}catch(s){console.error("Error loading classifications:",s),b("finding-error","Fehler beim Laden der Klassifikationen")}finally{o.value=!1}},ce=(c,s)=>{const g=s.target,N=g.value?parseInt(g.value):void 0;N?S.value[c]=N:delete S.value[c]},r=async()=>{if(!(!M.value||!h.value||!C.patientExaminationId||!z.value))try{o.value=!0;const c={patientExamination:C.patientExaminationId,finding:z.value,classifications:Object.entries(S.value).map(([ge,ee])=>({classification:parseInt(ge),choice:ee}))},g=(await _.createPatientFinding(c)).finding.id,N=I.getFindingById(g);N&&R.value.push(N);const se=h.value.nameDe||h.value.name;b("finding-added",z.value,se),ae(),w.value=!1}catch(c){console.error("Error adding finding to examination:",c);const s=_.error||c.response?.data?.error||c.response?.data?.detail||c.message||"Fehler beim Hinzufügen des Befunds";b("finding-error",s)}finally{o.value=!1}},k=async c=>{try{o.value=!0,I.getAllFindings.length;const g=(await A.get(`/api/examinations/${c}/findings`)).data;I.setClassificationChoicesFromLookup(g),console.log("Loaded findings for examination:",g.length)}catch(s){console.error("Error loading examination data:",s),b("finding-error","Fehler beim Laden der Untersuchungsdaten")}finally{o.value=!1}},y=async()=>{try{o.value=!0;let c=C.examinationId;if(!c&&C.patientExaminationId&&(c=m.getPatientExaminationById(C.patientExaminationId)?.examination?.id),!c){console.warn("Keine Examination ID verfügbar für Findings-Laden");return}const s=await l.loadFindingsForExamination(c);x.value=s,console.log("📋 [AddableFindingsDetail] Loaded findings for examinationId:",c,"findings count:",s.length)}catch(c){console.error("Error loading available findings:",c),b("finding-error","Fehler beim Laden der verfügbaren Befunde")}finally{o.value=!1}},P=async()=>{await y(),C.examinationId&&await k(C.examinationId)};return U(()=>C.patientExaminationId,async()=>{C.patientExaminationId&&await P()},{immediate:!0}),U(()=>C.examinationId,async()=>{C.examinationId&&await y()},{immediate:!0}),_e(async()=>{await P()}),(c,s)=>(d(),u("div",kt,[e("div",Ft,[s[7]||(s[7]=e("div",{class:"d-flex align-items-center gap-2"},[e("i",{class:"fas fa-plus-circle text-primary"}),e("h6",{class:"card-title mb-0"},"Befunde verwalten")],-1)),e("ul",It,[e("li",Ct,[e("a",{class:W(["nav-link",{active:v.value==="available"}]),onClick:s[0]||(s[0]=ye(g=>v.value="available",["prevent"])),href:"#"},[s[3]||(s[3]=e("i",{class:"fas fa-list me-1"},null,-1)),s[4]||(s[4]=T(" Verfügbare Befunde ",-1)),e("span",$t,p(K.value.length),1)],2)]),e("li",Pt,[e("a",{class:W(["nav-link",{active:v.value==="added"}]),onClick:s[1]||(s[1]=ye(g=>v.value="added",["prevent"])),href:"#"},[s[5]||(s[5]=e("i",{class:"fas fa-check-circle me-1"},null,-1)),s[6]||(s[6]=T(" Hinzugefügte Befunde ",-1)),e("span",qt,p(R.value.length),1)],2)])])]),e("div",Bt,[me(e("div",null,[e("div",Rt,[e("button",{class:"btn btn-sm btn-primary",onClick:s[2]||(s[2]=g=>w.value=!w.value),disabled:o.value},[e("i",{class:W(["fas",w.value?"fa-minus":"fa-plus"])},null,2),T(" "+p(w.value?"Auswahl ausblenden":"Befund auswählen"),1)],8,Lt)]),w.value?(d(),u("div",At,[s[9]||(s[9]=e("label",{class:"form-label fw-bold"},"Verfügbare Befunde:",-1)),K.value.length===0?(d(),u("div",Nt,[...s[8]||(s[8]=[e("i",{class:"fas fa-info-circle fa-2x mb-2"},null,-1),e("p",null,"Keine Befunde für diese Untersuchung verfügbar.",-1)])])):(d(),u("div",Tt,[(d(!0),u(H,null,G(K.value,g=>(d(),u("div",{key:g.id,class:"col-12 col-sm-6 col-md-4"},[e("div",{class:W(["finding-option card h-100 cursor-pointer",{"border-primary shadow-sm":z.value===g.id}]),onClick:N=>le(g.id)},[e("div",zt,[e("h6",Ut,p(g.nameDe||g.name),1),g.description?(d(),u("p",Kt,p(g.description.length>80?g.description.substring(0,80)+"...":g.description),1)):B("",!0)])],10,Dt)]))),128))]))])):B("",!0),z.value?(d(),u("div",jt,[e("div",Mt,[e("h6",Ot,[s[10]||(s[10]=e("i",{class:"fas fa-cog text-primary me-2"},null,-1)),s[11]||(s[11]=T(" Befund konfigurieren: ",-1)),e("strong",null,p(h.value?.nameDe||h.value?.name),1)]),e("button",{class:"btn btn-sm btn-outline-secondary",onClick:ae,title:"Auswahl zurücksetzen"},[...s[12]||(s[12]=[e("i",{class:"fas fa-times"},null,-1)])])]),q.value.length>0?(d(),u("div",Ht,[s[17]||(s[17]=e("h6",null,"Klassifikationen:",-1)),e("div",Gt,[(d(!0),u(H,null,G(q.value,g=>(d(),u("div",{key:g.id,class:"classification-config-item mb-3 p-3 border rounded"},[e("div",Jt,[e("strong",null,p(g.name),1),e("div",Vt,[g.required?(d(),u("span",Wt,[...s[13]||(s[13]=[e("i",{class:"fas fa-exclamation-triangle"},null,-1),T(" Erforderlich ",-1)])])):B("",!0),S.value[g.id]?(d(),u("span",Yt,[...s[14]||(s[14]=[e("i",{class:"fas fa-check"},null,-1),T(" Ausgewählt ",-1)])])):B("",!0)])]),g.description?(d(),u("p",Xt,p(g.description),1)):B("",!0),e("select",{class:W(["form-select form-select-sm",{"border-success":S.value[g.id],"border-warning":!S.value[g.id]&&g.required}]),value:S.value[g.id]||"",onChange:N=>ce(g.id,N)},[s[15]||(s[15]=e("option",{value:""},"Bitte wählen...",-1)),!g.choices||g.choices.length===0?(d(),u("option",Zt,"Keine Auswahl")):(d(!0),u(H,{key:1},G(g.choices,N=>(d(),u("option",{key:N.id,value:N.id},p(N.name),9,en))),128))],42,Qt)]))),128))]),e("div",tn,[e("div",nn,[s[16]||(s[16]=e("small",{class:"text-muted"},"Erforderliche Klassifikationen:",-1)),e("small",{class:W(["fw-semibold",O.value.complete?"text-success":"text-warning"])},p(O.value.selected)+"/"+p(O.value.required),3)]),e("div",an,[e("div",{class:W(["progress-bar",O.value.complete?"bg-success":"bg-warning"]),style:Be({width:O.value.percentage+"%"})},null,6)])])])):B("",!0),e("div",sn,[e("button",{class:"btn btn-success",onClick:r,disabled:o.value||!M.value,title:M.value?"Befund zur Untersuchung hinzufügen":"Bitte alle erforderlichen Klassifikationen auswählen"},[o.value?(d(),u("span",on)):B("",!0),s[18]||(s[18]=e("i",{class:"fas fa-plus me-2"},null,-1)),s[19]||(s[19]=T(" Befund hinzufügen ",-1))],8,ln)])])):w.value?B("",!0):(d(),u("div",rn,[...s[20]||(s[20]=[e("i",{class:"fas fa-plus-circle fa-3x mb-3 opacity-50"},null,-1),e("p",null,'Klicken Sie auf "Befund auswählen", um einen neuen Befund hinzuzufügen.',-1)])]))],512),[[Ce,v.value==="available"]]),me(e("div",null,[R.value.length===0?(d(),u("div",dn,[...s[21]||(s[21]=[e("i",{class:"fas fa-folder-open fa-3x mb-3"},null,-1),e("p",null,"Noch keine Befunde zu dieser Untersuchung hinzugefügt.",-1)])])):(d(),u("div",un,[(d(!0),u(H,null,G(R.value,g=>(d(),u("div",{key:g.id,class:"col-12 col-sm-6 col-md-4 col-lg-3"},[e("div",cn,[e("div",gn,[e("div",mn,[s[22]||(s[22]=e("i",{class:"fas fa-check-circle text-success mt-1"},null,-1)),e("div",fn,[e("h6",vn,p(g.nameDe||g.name),1),g.description?(d(),u("p",pn,p(g.description.length>80?g.description.substring(0,80)+"...":g.description),1)):B("",!0),e("span",hn,"ID: "+p(g.id),1)])])])])]))),128))]))],512),[[Ce,v.value==="added"]])])]))}}),yn={class:"requirement-generator container-fluid py-4"},xn={key:0,class:"alert alert-danger"},_n={key:0},En={key:1},wn={key:2},Sn={class:"card mb-3"},kn={class:"card-body"},Fn={class:"row align-items-end"},In={class:"col-md-6"},Cn={class:"form-group"},$n={class:"d-flex justify-content-between align-items-center mb-2"},Pn={key:0,class:"d-flex align-items-center gap-2"},qn=["disabled"],Bn={value:null,disabled:""},Rn=["value"],Ln={key:0,class:"mt-2"},An={class:"col-md-6"},Nn={class:"form-group"},Tn=["disabled"],Dn={value:null,disabled:""},zn=["value"],Un={class:"row mt-3"},Kn={class:"col-12"},jn=["disabled"],Mn={key:0,class:"spinner-border spinner-border-sm",role:"status","aria-hidden":"true"},On={key:1},Hn={key:2},Gn={key:1,class:"row g-3"},Jn={class:"col-12"},Vn={class:"card"},Wn={class:"card-body"},Yn={class:"row"},Xn={class:"col-md-4"},Qn={class:"col-md-4"},Zn={class:"col-md-4"},ei={class:"row mt-2"},ti={class:"col-md-6"},ni={class:"col-md-6"},ii={class:"col-12 col-xl-6"},ai={class:"card h-100"},si={class:"card-header d-flex justify-content-between align-items-center"},li={class:"text-muted"},oi={class:"d-flex gap-2"},ri=["disabled"],di=["disabled"],ui=["disabled"],ci=["disabled"],gi={key:0,class:"row g-3 mt-3 card-body pre-scrollable",style:{"max-height":"70vh",overflow:"auto"}},mi={class:"col-12"},fi={class:"card"},vi={class:"card-body"},pi={class:"list-group list-group-flush"},hi={class:"flex-grow-1"},bi={class:"d-flex justify-content-between align-items-center"},yi={class:"fw-semibold"},xi={class:"d-flex align-items-center gap-2"},_i=["onClick","disabled"],Ei={class:"text-muted d-block"},wi={key:0,class:"mt-2"},Si={class:"text-muted"},ki={class:"form-check form-switch ms-3"},Fi=["checked","onChange"],Ii={key:0,class:"list-group-item text-muted"},Ci={key:1,class:"mt-3 p-3 bg-light rounded"},$i={class:"progress mb-2",style:{height:"10px"}},Pi={class:"text-muted"},qi={class:"mt-2"},Bi=["disabled"],Ri={class:"card-body"},Li={key:0,class:"mb-3"},Ai={class:"col-12 col-xl-6"},Ni={class:"card h-100"},Ti={class:"card-header d-flex justify-content-between align-items-center"},Di={key:0,class:"d-flex align-items-center gap-2"},zi={class:"text-muted"},Ui=["disabled"],Ki={class:"card-body pre-scrollable",style:{"max-height":"70vh",overflow:"auto"}},ji={key:0,class:"text-center py-4"},Mi={key:1,class:"findings-container"},Oi={key:2,class:"text-center py-4"},Hi={key:2,class:"alert alert-success alert-dismissible"},Gi={class:"modal-content"},Ji={class:"modal-body"},X="/api/lookup",V="lookupToken",Q="currentPatientExaminationId",Vi=xe({__name:"RequirementGenerator",setup(i){const a=Re(),m=fe(),I=Ee(),$=Ge(),C=Le(),b=F(null),L=F(null),_=F(null),l=F(null),o=F(null),v=F(null),w=F(!1),z=F(!1),q=F(null),S=F(!1),x=D(()=>{const t=a.patientsWithDisplayName;return console.log("Patients with displayName:",t),t}),R=D(()=>a.loading),K=D(()=>{const t=m.examinationsDropdown;return console.log("Examinations dropdown:",t),t}),Z=D(()=>m.loading),h=D(()=>{const t=o.value?.requirementSets??[];return console.log("Computing requirementSets:",t),t}),E=D({get:()=>o.value?.selectedRequirementSetIds??[],set:t=>{o.value&&(o.value.selectedRequirementSetIds=t)}}),M=D(()=>new Set(E.value)),O=D(()=>o.value?.availableFindings??[]),le=F(!1);U(o,(t,n)=>{le.value||(le.value=!0,console.log("Lookup changed:",{newVal:t,oldVal:n}),t&&t.patientExaminationId!==_.value&&(_.value=t.patientExaminationId,console.log("Updated currentPatientExaminationId to:",_.value)),le.value=!1)},{deep:!0});const ae=F(!1);U(E,(t,n)=>{ae.value||(ae.value=!0,console.log("Selected Requirement Set IDs changed:",{newVal:t,oldVal:n}),t!==n&&$.setCurrentRequirementSetIds(t),ae.value=!1)});const oe=F(!1);U(_,(t,n)=>{oe.value||(oe.value=!0,console.log("Current Examination ID changed:",{newVal:t,oldVal:n}),t!==n&&C.setCurrentPatientExaminationId(t),oe.value=!1)}),D(()=>JSON.stringify({token:l.value,selectedRequirementSetIds:E.value},null,2));const ce=t=>o.value?!!I.getFindingIdsByPatientExaminationId(o.value.patientExaminationId).includes(t):!1,r=(t,n)=>{let f,j,te=[],ne=null;typeof t=="number"?(f=t,j=n||I.getFindingById(f)?.name||`Befund ${f}`):(f=t.findingId,j=t.findingName||I.getFindingById(f)?.name||`Befund ${f}`,te=t.selectedClassifications||[],ne=t.response),console.log("Finding added to examination:",{findingId:f,name:j,selectedClassifications:te.length,hasResponse:!!ne});const ue=te.length,be=ue>0?`Befund "${j}" wurde erfolgreich hinzugefügt mit ${ue} Klassifikation${ue!==1?"en":""}!`:`Befund "${j}" wurde erfolgreich hinzugefügt!`;q.value=be,setTimeout(()=>{q.value=null},5e3),setTimeout(()=>{P()},500)},k=(t,n,f)=>{console.log("Classification updated:",{findingId:t,classificationId:n,choiceId:f});const te=I.getFindingById(t)?.name||`Befund ${t}`,ne=f?`Klassifikation für "${te}" wurde erfolgreich ausgewählt!`:`Klassifikation für "${te}" wurde zurückgesetzt!`;q.value=ne,setTimeout(()=>{q.value=null},3e3),setTimeout(()=>{P()},300)},y=async()=>{I.findings.length===0&&await I.fetchFindings()},P=async()=>{if(!o.value||!l.value){console.log("Skipping evaluation: lookup or token not available");return}if(!o.value.patientExaminationId){console.log("Skipping evaluation: patientExaminationId not available in lookup",o.value);return}try{console.log("Evaluating requirements based on current lookup data..."),await $.evaluateFromLookupData(o.value),console.log("Requirements evaluated successfully"),q.value="Anforderungen wurden erfolgreich evaluiert!",setTimeout(()=>{q.value=null},3e3)}catch(t){console.error("Error evaluating requirements:",t),v.value="Fehler bei der Evaluierung der Anforderungen: "+(t instanceof Error?t.message:String(t))}},c=async t=>{if(!(!o.value||!l.value))try{console.log("Evaluating requirement set:",t),await $.evaluateRequirementSet(t,o.value.patientExaminationId),console.log("Requirement set evaluated successfully")}catch(n){console.error("Error evaluating requirement set:",n),v.value="Fehler bei der Evaluierung des Anforderungssets: "+(n instanceof Error?n.message:String(n))}},s=t=>$.getRequirementSetEvaluationStatus(t),g=D(()=>{if(!o.value)return null;const t=h.value.length,n=h.value.filter(f=>$.getRequirementSetEvaluationStatus(f.id)).length;return{totalSets:t,evaluatedSets:n,completionPercentage:t>0?Math.round(n/t*100):0}});function N(t){return t?.response?.data?.detail?t.response.data.detail:t?.message?t.message:"Unbekannter Fehler"}function se(t){o.value?o.value={...o.value,...t}:o.value=t}async function ge(){if(S.value){console.log("Restart already in progress, skipping createPatientExaminationAndInitLookup...");return}if(!b.value||!L.value){console.error("Missing required selections:",{selectedPatientId:b.value,selectedExaminationId:L.value}),v.value="Bitte wählen Sie sowohl einen Patienten als auch eine Untersuchung aus.";return}const t=K.value.find(n=>n.id===L.value);if(!t){console.error("Selected examination not found in dropdown:",{selectedExaminationId:L.value,availableExams:K.value.map(n=>({id:n.id,name:n.name}))}),v.value="Ausgewählte Untersuchung nicht gefunden.";return}console.log("Creating PatientExamination with:",{patientId:b.value,examinationName:t.name,examinationId:t.id}),v.value=null,w.value=!0;try{const n=new Date().toISOString().split("T")[0],f=a.getPatientById(b.value);if(!f)throw new Error("Selected patient not found");const j=K.value.find(be=>be.id===L.value);if(!j)throw new Error("Selected examination not found");const te=f.dob?new Date(f.dob).toISOString().split("T")[0]:null,ne=await A.post("/api/patient-examinations/",{patient:f.patientHash||`patient_${f.id}`,examination:j.name,date_start:n,patient_birth_date:te,patient_gender:f.gender||null});C.addPatientExamination(ne.data),console.log("PatientExamination created:",ne.data),_.value=ne.data.id;const ue=await A.post(`${X}/init/`,{patientExaminationId:_.value});l.value=ue.data.token,console.log("Lookup initialized with token:",l.value),he(),await y(),await ee()}catch(n){v.value=N(n)}finally{w.value=!1}}async function ee(){if(l.value){v.value=null,w.value=!0;try{const t=await A.get(`${X}/${l.value}/all/?skip_recompute=true`);console.log("Lookup API response:",t.data),se(t.data)}catch(t){t?.response?.status===404?(v.value="Lookup-Sitzung ist abgelaufen. Starte neu...",l.value=null,o.value=null,Y(),localStorage.removeItem(V),localStorage.removeItem(Q),await pe()||(v.value="Lookup-Sitzung ist abgelaufen. Bitte starten Sie manuell neu.")):v.value=N(t)}finally{w.value=!1}}}async function Ne(t){if(!l.value||!t.length)return;v.value=null,w.value=!0;const n=encodeURIComponent(t.join(","));try{const f=await A.get(`${X}/${l.value}/parts/?keys=${n}`);se(f.data)}catch(f){f?.response?.status===404?(v.value="Lookup-Sitzung ist abgelaufen. Starte neu...",l.value=null,o.value=null,Y(),localStorage.removeItem(V),localStorage.removeItem(Q),await pe()||(v.value="Lookup-Sitzung ist abgelaufen. Bitte starten Sie manuell neu.")):v.value=N(f)}finally{w.value=!1}}async function Te(t){if(l.value)try{await A.patch(`${X}/${l.value}/parts/`,{updates:t}),await Ne(["availableFindings","requiredFindings"])}catch(n){n?.response?.status===404?(v.value="Lookup-Sitzung ist abgelaufen. Bitte starten Sie erneut.",l.value=null,o.value=null,Y(),localStorage.removeItem(V),localStorage.removeItem(Q)):v.value=N(n)}}function De(t,n){const f=new Set(E.value);n?f.add(t):f.delete(t),E.value=Array.from(f),Te({selectedRequirementSetIds:E.value}),$.setCurrentRequirementSetIds(E.value),l.value&&we()}async function we(){if(a.currentPatient&&a.currentPatient.id!==b.value&&console.warn("Selected patient ID does not match patient store name. Reloading..."),!!l.value)try{console.log("Triggering recomputation for selected requirement sets:",E.value);const t=await A.post(`${X}/${l.value}/recompute/`);console.log("Recompute response:",t.data),t.data.updates&&se(t.data.updates),await ee(),E.value.length>0&&await P()}catch(t){console.error("Error during recomputation:",t),v.value="Fehler bei der Neuberechnung: "+N(t)}}function ve(){z.value=!1,a.clearError()}function ze(t){b.value=t.id||null,z.value=!1,a.clearError(),q.value=`Patient "${t.firstName} ${t.lastName}" wurde erfolgreich erstellt und ausgewählt!`,setTimeout(()=>{q.value=null},5e3)}async function Se(){if(!l.value)return!1;try{return await A.get(`${X}/${l.value}/parts/?keys=patientExaminationId`),!0}catch(t){return t?.response?.status===404&&(console.log("Token validation failed with 404, attempting restart..."),l.value=null,o.value=null,v.value="Lookup-Sitzung ist abgelaufen. Starte neu...",await pe()||(v.value="Lookup-Sitzung ist abgelaufen. Bitte starten Sie manuell neu.")),!1}}function Ue(){l.value&&(w.value=!0,v.value=null,A.get(`${X}/${l.value}/parts/?keys=patientExaminationId`).then(()=>A.patch(`${X}/${l.value}/parts/`,{updates:{}})).then(()=>{ee()}).catch(t=>{v.value=N(t),t?.response?.status===404&&(l.value=null,o.value=null,v.value="Lookup-Session ist abgelaufen. Bitte starten Sie erneut.",Y())}).finally(()=>{w.value=!1}))}function Ke(){l.value=null,o.value=null,_.value=null,v.value=null,q.value=null,Y(),localStorage.removeItem(V),localStorage.removeItem(Q)}async function je(){console.log("Resetting session for new patient..."),l.value=null,o.value=null,_.value=null,v.value=null,q.value=null,Y(),localStorage.removeItem(V),localStorage.removeItem(Q),$.reset(),console.log("Session reset complete for new patient")}async function pe(){if(S.value)return console.log("Restart already in progress, skipping..."),!1;console.log("Attempting to restart lookup session..."),S.value=!0;try{if(l.value=null,o.value=null,Y(),localStorage.removeItem(V),await new Promise(t=>setTimeout(t,500)),_.value&&b.value&&L.value){console.log("Reusing existing patient examination:",_.value),console.log("selectedPatientId:",b.value),console.log("selectedExaminationId:",L.value);const t=await A.post(`${X}/init/`,{patientExaminationId:_.value});return l.value=t.data.token,he(),await ee(),q.value="Lookup-Session wurde erfolgreich neu gestartet!",setTimeout(()=>{q.value=null},3e3),!0}else return console.log("No existing patient examination, creating new one"),console.log("currentPatientExaminationId:",_.value),console.log("selectedPatientId:",b.value),console.log("selectedExaminationId:",L.value),!b.value||!L.value?(v.value="Kann Session nicht automatisch neu starten: Patient oder Untersuchung fehlt.",!1):(await ge(),!0)}catch(t){return console.error("Failed to restart lookup session:",t),v.value="Fehler beim Neustart der Lookup-Session: "+N(t),!1}finally{S.value=!1}}let de=null;function he(){de||(de=window.setInterval(async()=>{l.value&&!S.value&&await Se()},900*1e3))}function Y(){de&&(clearInterval(de),de=null)}F(!1);const ke=localStorage.getItem(V),Fe=localStorage.getItem(Q);return ke&&(l.value=ke),Fe&&(_.value=parseInt(Fe)),U(l,t=>{t?localStorage.setItem(V,t):localStorage.removeItem(V)}),U(_,t=>{t?localStorage.setItem(Q,t.toString()):localStorage.removeItem(Q)}),U(L,t=>{console.log("Examination selection changed:",{newId:t,selectedPatientId:b.value,availableExams:K.value.map(n=>({id:n.id,name:n.name}))}),m.setSelectedExamination(t),t&&m.loadFindingsForExamination(t)}),U(b,async(t,n)=>{console.log("Patient selection changed:",{oldPatientId:n,newPatientId:t,currentExaminationsCount:K.value.length}),L.value=null,n&&t!==n&&(console.log("Patient changed, resetting session for new overview..."),await je())}),U(E,async(t,n)=>{t.length!==n.length&&o.value&&(console.log("Requirement set selection changed, triggering evaluation..."),await P())},{deep:!0}),U(o,async(t,n)=>{t&&t!==n&&E.value.length>0&&(console.log("Lookup data changed, triggering evaluation..."),setTimeout(()=>{P()},1e3))},{deep:!0}),U(o,t=>{t&&t.requirementsBySet&&(console.log("Loading requirement sets from lookup data..."),$.loadRequirementSetsFromLookup(t))},{immediate:!0}),_e(async()=>{console.log("Component mounted, starting data loading..."),await Promise.all([a.fetchPatients(),m.fetchExaminations()]),console.log("Data loading completed:",{patientsCount:x.value.length,examinationsCount:K.value.length}),await a.initializeLookupData(),l.value&&(console.log("Validating existing token:",l.value),await Se()?(await ee(),he()):(l.value=null,o.value=null,_.value=null,Y(),localStorage.removeItem(V),localStorage.removeItem(Q))),await y()}),Me(()=>{Y()}),(t,n)=>(d(),u("div",yn,[ie(a).error||v.value||ie(m).error?(d(),u("div",xn,[ie(a).error?(d(),u("p",_n,"Patienten-Store Fehler: "+p(ie(a).error),1)):B("",!0),ie(m).error?(d(),u("p",En,"Untersuchungs-Store Fehler: "+p(ie(m).error),1)):B("",!0),v.value?(d(),u("p",wn,"Lookup Fehler: "+p(v.value),1)):B("",!0)])):B("",!0),e("div",Sn,[n[12]||(n[12]=e("div",{class:"card-header"},[e("h2",{class:"h5 mb-0"},"1. Patient und Untersuchung auswählen")],-1)),e("div",kn,[e("div",Fn,[e("div",In,[e("div",Cn,[e("div",$n,[n[9]||(n[9]=e("label",{for:"patient-select"},"Patient auswählen",-1)),b.value?(d(),u("div",Pn,[n[8]||(n[8]=e("span",{class:"badge bg-info"},[e("i",{class:"fas fa-user"}),T(" Aktiv ")],-1)),e("button",{type:"button",class:"btn btn-sm btn-outline-secondary",onClick:n[0]||(n[0]=f=>ie(a).clearCurrentPatient()),title:"Patientenauswahl zurücksetzen"},[...n[7]||(n[7]=[e("i",{class:"fas fa-times"},null,-1)])])])):B("",!0)]),me(e("select",{id:"patient-select","onUpdate:modelValue":n[1]||(n[1]=f=>b.value=f),class:"form-control",disabled:R.value||w.value},[e("option",Bn,p(R.value?"Lade Patienten...":"Bitte wählen Sie einen Patienten"),1),(d(!0),u(H,null,G(x.value,f=>(d(),u("option",{key:f.id,value:f.id},p(f.displayName),9,Rn))),128))],8,qn),[[$e,b.value]]),b.value?(d(),u("div",Ln,[...n[10]||(n[10]=[e("small",{class:"text-muted"},[e("i",{class:"fas fa-info-circle"}),T(" Bei Patientenwechsel wird automatisch eine neue Übersicht generiert. ")],-1)])])):B("",!0)])]),e("div",An,[e("div",Nn,[n[11]||(n[11]=e("label",{for:"examination-select"},"Untersuchung auswählen",-1)),me(e("select",{id:"examination-select","onUpdate:modelValue":n[2]||(n[2]=f=>L.value=f),class:"form-control",disabled:Z.value||!b.value||w.value},[e("option",Dn,p(Z.value?"Lade Untersuchungen...":"Bitte wählen Sie eine Untersuchung"),1),(d(!0),u(H,null,G(K.value,f=>(d(),u("option",{key:f.id,value:f.id},p(f.displayName),9,zn))),128))],8,Tn),[[$e,L.value]])])])]),e("div",Un,[e("div",Kn,[e("button",{class:"btn btn-primary",disabled:!b.value||!L.value||w.value||!!l.value,onClick:ge},[w.value?(d(),u("span",Mn)):B("",!0),l.value?(d(),u("span",Hn,"Anforderungsbericht bereits aktiv")):(d(),u("span",On,"2. Anforderungsbericht erstellen"))],8,jn)])])])]),o.value?(d(),u("div",Gn,[e("div",Jn,[e("div",Vn,[n[18]||(n[18]=e("div",{class:"card-header"},[e("h2",{class:"h6 mb-0"},"Debug: Aktuelle Lookup-Daten")],-1)),e("div",Wn,[e("div",Yn,[e("div",Xn,[n[13]||(n[13]=e("strong",null,"Patient Examination ID:",-1)),T(" "+p(o.value.patientExaminationId||"Nicht verfügbar"),1)]),e("div",Qn,[n[14]||(n[14]=e("strong",null,"Token:",-1)),T(" "+p(l.value),1)]),e("div",Zn,[n[15]||(n[15]=e("strong",null,"Requirement Sets:",-1)),T(" "+p(h.value.length),1)])]),e("div",ei,[e("div",ti,[n[16]||(n[16]=e("strong",null,"Ausgewählte Sets:",-1)),T(" "+p(E.value.join(", ")||"Keine"),1)]),e("div",ni,[n[17]||(n[17]=e("strong",null,"Verfügbare Findings:",-1)),T(" "+p(O.value.length),1)])])])])]),e("div",ii,[e("div",ai,[e("div",si,[e("div",null,[n[19]||(n[19]=e("h2",{class:"h5 mb-0"},"3. Requirement Sets anpassen",-1)),e("small",li,"Token: "+p(l.value),1)]),e("div",oi,[e("button",{class:"btn btn-sm btn-outline-secondary",onClick:ee,disabled:w.value}," Aktualisieren ",8,ri),e("button",{class:"btn btn-sm btn-outline-info",onClick:we,disabled:w.value||!l.value}," Neu berechnen ",8,di),e("button",{class:"btn btn-sm btn-outline-info",onClick:Ue,disabled:w.value||!l.value}," Session erneuern ",8,ui),e("button",{class:"btn btn-sm btn-outline-danger",onClick:Ke,disabled:w.value||!l.value}," Session zurücksetzen ",8,ci)])]),o.value?(d(),u("div",gi,[e("div",mi,[e("div",fi,[n[20]||(n[20]=e("div",{class:"card-header"},[e("h2",{class:"h5 mb-0"},"Befunde in der aktuellen Untersuchung")],-1)),e("div",vi,[Pe(bn,{"examination-id":L.value||void 0,"patient-examination-id":_.value||void 0,onFindingAdded:r,onFindingError:n[3]||(n[3]=f=>v.value=f)},null,8,["examination-id","patient-examination-id"])])])])])):B("",!0),e("ul",pi,[(d(!0),u(H,null,G(h.value,f=>(d(),u("li",{key:f.id,class:"list-group-item d-flex justify-content-between align-items-center"},[e("div",hi,[e("div",bi,[e("span",yi,p(f.name),1),e("div",xi,[s(f.id)?(d(),u("span",{key:0,class:W(["badge",s(f.id).met?"bg-success":"bg-warning"])},[e("i",{class:W(["fas",s(f.id).met?"fa-check":"fa-exclamation-triangle"])},null,2),T(" "+p(s(f.id).met?"Erfüllt":"Nicht erfüllt"),1)],2)):B("",!0),e("button",{class:"btn btn-sm btn-outline-info",onClick:j=>c(f.id),disabled:w.value,title:"Anforderungsset evaluieren"},[...n[21]||(n[21]=[e("i",{class:"fas fa-calculator"},null,-1)])],8,_i)])]),e("small",Ei,"type: "+p(f.type),1),s(f.id)?(d(),u("div",wi,[e("small",Si," Erfüllte Anforderungen: "+p(s(f.id)?.metRequirementsCount)+" / "+p(s(f.id)?.totalRequirementsCount),1)])):B("",!0)]),e("div",ki,[e("input",{class:"form-check-input",type:"checkbox",checked:M.value.has(f.id),onChange:j=>De(f.id,j.target.checked)},null,40,Fi)])]))),128)),h.value.length?B("",!0):(d(),u("li",Ii,"Keine Sets gefunden."))]),g.value&&g.value.totalSets>0?(d(),u("div",Ci,[n[23]||(n[23]=e("h6",{class:"mb-2"},"Evaluierungsübersicht",-1)),e("div",$i,[e("div",{class:W(["progress-bar",g.value.completionPercentage===100?"bg-success":"bg-info"]),style:Be({width:g.value.completionPercentage+"%"})},null,6)]),e("small",Pi,p(g.value.evaluatedSets)+" von "+p(g.value.totalSets)+" Sets evaluiert ("+p(g.value.completionPercentage)+"%) ",1),e("div",qi,[e("button",{class:"btn btn-sm btn-primary",onClick:P,disabled:w.value},[...n[22]||(n[22]=[e("i",{class:"fas fa-sync"},null,-1),T(" Alle evaluieren ",-1)])],8,Bi)])])):B("",!0),e("div",Ri,[o.value?(d(),u("div",Li,[n[24]||(n[24]=e("strong",null,"Debug Info:",-1)),n[25]||(n[25]=e("br",null,null,-1)),T(" Lookup exists: "+p(!!o.value),1),n[26]||(n[26]=e("br",null,null,-1)),T(" Requirement sets count: "+p(h.value.length),1),n[27]||(n[27]=e("br",null,null,-1)),n[28]||(n[28]=T(" Raw lookup data: ",-1)),e("pre",null,p(JSON.stringify(o.value,null,2)),1)])):B("",!0)])])]),e("div",Ai,[e("div",Ni,[e("div",Ti,[n[30]||(n[30]=e("h2",{class:"h5 mb-0"},"Um die Untersuchung abzuschließen, müssen die folgenden Befunde vorhanden sein.",-1)),n[31]||(n[31]=e("p",{class:"text-muted mb-0"},"Hinweis: Ändern Sie die Klassifikationen auf ihr bevorzugtes Format.",-1)),O.value.length>0?(d(),u("div",Di,[e("small",zi,p(O.value.length)+" verfügbar",1),e("button",{class:"btn btn-sm btn-outline-info",onClick:n[4]||(n[4]=f=>y()),disabled:w.value,title:"Befunde aktualisieren"},[...n[29]||(n[29]=[e("i",{class:"fas fa-sync-alt"},null,-1)])],8,Ui)])):B("",!0)]),e("div",Ki,[ie(I).loading?(d(),u("div",ji,[...n[32]||(n[32]=[e("div",{class:"spinner-border",role:"status"},[e("span",{class:"visually-hidden"},"Loading...")],-1),e("p",{class:"mt-2 text-muted"},"Lade Befunde...",-1)])])):O.value.length?(d(),u("div",Mi,[(d(!0),u(H,null,G(O.value,f=>(d(),Oe(wt,{key:f,"finding-id":f,"is-added-to-examination":ce(f),"patient-examination-id":o.value?.patientExaminationId||void 0,onAddedToExamination:r,onClassificationUpdated:k},null,8,["finding-id","is-added-to-examination","patient-examination-id"]))),128))])):(d(),u("div",Oi,[...n[33]||(n[33]=[e("i",{class:"fas fa-info-circle fa-2x text-muted mb-3"},null,-1),e("p",{class:"text-muted"},"Keine Befunde verfügbar für die Auswahl.",-1),e("small",{class:"text-muted"},"Wählen Sie eine Untersuchung aus, um verfügbare Befunde zu laden.",-1)])]))])]),n[34]||(n[34]=T("alert ",-1))])])):B("",!0),q.value?(d(),u("div",Hi,[n[35]||(n[35]=e("strong",null,"Erfolg:",-1)),T(" "+p(q.value)+" ",1),e("button",{type:"button",class:"btn-close",onClick:n[5]||(n[5]=f=>q.value=null)})])):B("",!0),z.value?(d(),u("div",{key:3,class:"modal-overlay",onClick:ve},[e("div",{class:"modal-dialog",onClick:n[6]||(n[6]=ye(()=>{},["stop"]))},[e("div",Gi,[e("div",{class:"modal-header"},[n[36]||(n[36]=e("h5",{class:"modal-title"},"Neuen Patienten erstellen",-1)),e("button",{type:"button",class:"btn-close",onClick:ve})]),e("div",Ji,[Pe(He,{onPatientCreated:ze,onCancel:ve})])])])])):B("",!0)]))}}),Qi=qe(Vi,[["__scopeId","data-v-65587b19"]]);export{Qi as R};
