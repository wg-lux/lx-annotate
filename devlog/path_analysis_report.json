{
  "critical_hardcoded_paths": [
    {
      "file": "tests/test_video_segmentation_views.py",
      "line": 250,
      "pattern": "'video/",
      "code": "self.assertEqual(response['Content-Type'], 'video/mp4')",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/services/video_import.py",
      "line": 721,
      "pattern": "\"anonym_videos/",
      "code": "# FIXED: Use centralized path structure instead of hardcoded \"anonym_videos/\"",
      "recommendation": "data_paths[\"anonym_video\"]"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/meta/pdf_file_meta_extraction.py",
      "line": 64,
      "pattern": "\"/pdf/",
      "code": "return request.build_absolute_uri(f\"/pdf/sensitivemeta/?id={obj.id}\")  # Constructs full API endpoint",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/pdf/anony_text_validation.py",
      "line": 38,
      "pattern": "\"/pdf/",
      "code": "return request.build_absolute_uri(f\"/pdf/anony_text/?id={obj.id}\") if request and obj.file else None",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/auth/keycloak.py",
      "line": 104,
      "pattern": "\"/videos/",
      "code": "# FIXED: Use named URL instead of hardcoded \"/videos/\" path",
      "recommendation": "data_paths[\"video\"]"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/auth/keycloak.py",
      "line": 107,
      "pattern": "\"/videos/",
      "code": "return redirect(\"/videos/\")  # temporary: needs URL name resolution",
      "recommendation": "data_paths[\"video\"]"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/misc/upload_views.py",
      "line": 57,
      "pattern": "'video/",
      "code": "'video/mp4',",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/misc/upload_views.py",
      "line": 58,
      "pattern": "'video/",
      "code": "'video/avi',",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/misc/upload_views.py",
      "line": 59,
      "pattern": "'video/",
      "code": "'video/quicktime',",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/misc/upload_views.py",
      "line": 60,
      "pattern": "'video/",
      "code": "'video/x-msvideo',",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/misc/upload_views.py",
      "line": 61,
      "pattern": "'video/",
      "code": "'video/x-ms-wmv'",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/misc/upload_views.py",
      "line": 189,
      "pattern": "'video/",
      "code": "return 'video/mp4'",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/misc/upload_views.py",
      "line": 191,
      "pattern": "'video/",
      "code": "return 'video/avi'",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/misc/upload_views.py",
      "line": 193,
      "pattern": "'video/",
      "code": "return 'video/quicktime'",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/misc/upload_views.py",
      "line": 195,
      "pattern": "'video/",
      "code": "return 'video/x-ms-wmv'",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/video/segmentation.py",
      "line": 51,
      "pattern": "'video/",
      "code": "content_type = mime or 'video/mp4'",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/video/media/video_download_processed.py",
      "line": 49,
      "pattern": "'video/",
      "code": "content_type='video/mp4'",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    },
    {
      "file": "libs/endoreg-db/tests/media/video/test_video_segmentation_views.py",
      "line": 101,
      "pattern": "'video/",
      "code": "self.assertEqual(response['Content-Type'], 'video/mp4')",
      "recommendation": "Use data_paths from endoreg_db.utils.paths"
    }
  ],
  "inconsistent_env_vars": [
    {
      "file": "lx_annotate/settings_backup.py",
      "line": 44,
      "type": "direct_os_getenv",
      "code": "STORAGE_DIR = os.getenv(\"STORAGE_DIR\")",
      "current": "os.getenv(\"STORAGE_DIR\"",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "lx_annotate/settings_dev.py",
      "line": 59,
      "type": "direct_os_getenv",
      "code": "if storage_dir := os.getenv(\"STORAGE_DIR\"):",
      "current": "os.getenv(\"STORAGE_DIR\"",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "lx_annotate/urls.py",
      "line": 21,
      "type": "django_settings",
      "code": "urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
      "current": "settings.MEDIA_URL",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "lx_annotate/urls.py",
      "line": 21,
      "type": "django_settings",
      "code": "urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/wsgi.py",
      "line": 10,
      "type": "django_settings",
      "code": "application.add_files(str(settings.MEDIA_ROOT), prefix='/media/')",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/dev/dev_settings.py",
      "line": 12,
      "type": "env_access",
      "code": "os.environ[\"STORAGE_DIR\"] = str(BASE_DIR / \"storage\")",
      "current": "os.environ[\"STORAGE_DIR\"]",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/helpers/default_objects.py",
      "line": 257,
      "type": "django_settings",
      "code": "temp_dir = Path(settings.MEDIA_ROOT) / \"temp_test_files\"",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/urls/__init__.py",
      "line": 61,
      "type": "django_settings",
      "code": "urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
      "current": "settings.MEDIA_URL",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/urls/__init__.py",
      "line": 61,
      "type": "django_settings",
      "code": "urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/utils/frame_anonymization_utils.py",
      "line": 372,
      "type": "django_settings",
      "code": "Path(settings.MEDIA_ROOT).resolve(),",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/utils/paths.py",
      "line": 27,
      "type": "direct_os_getenv",
      "code": "env_val = os.getenv(\"STORAGE_DIR\")",
      "current": "os.getenv(\"STORAGE_DIR\"",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/models/media/video/video_file_anonymize.py",
      "line": 271,
      "type": "django_settings",
      "code": "video.processed_file.name = video.get_target_anonymized_video_path().relative_to(settings.MEDIA_ROOT).as_posix()",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/_old/raw_pdf_meta_validation.py",
      "line": 67,
      "type": "django_settings",
      "code": "Constructs the full absolute file path using `settings.MEDIA_ROOT`.",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/_old/raw_pdf_meta_validation.py",
      "line": 74,
      "type": "django_settings",
      "code": "full_path = Path(settings.MEDIA_ROOT) / pdf_relative_path",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/_old/raw_video_meta_validation.py",
      "line": 76,
      "type": "django_settings",
      "code": "Constructs the full absolute file path using `settings.MEDIA_ROOT`",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/_old/raw_video_meta_validation.py",
      "line": 83,
      "type": "django_settings",
      "code": "full_path = Path(settings.MEDIA_ROOT) / video_relative_path",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/_old/video.py",
      "line": 43,
      "type": "django_settings",
      "code": "return str(Path(settings.MEDIA_ROOT) / f.name) if f else None",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/meta/pdf_file_meta_extraction.py",
      "line": 80,
      "type": "django_settings",
      "code": "Constructs the full absolute file path using `settings.MEDIA_ROOT`.",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/meta/pdf_file_meta_extraction.py",
      "line": 87,
      "type": "django_settings",
      "code": "full_path = Path(settings.MEDIA_ROOT) / pdf_relative_path",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/pdf/anony_text_validation.py",
      "line": 51,
      "type": "django_settings",
      "code": "Constructs the full absolute file path using `settings.MEDIA_ROOT`.",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/pdf/anony_text_validation.py",
      "line": 56,
      "type": "django_settings",
      "code": "full_path = Path(settings.MEDIA_ROOT) / pdf_relative_path",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/video/video_file_detail.py",
      "line": 36,
      "type": "django_settings",
      "code": "return str(Path(settings.MEDIA_ROOT) / f.name) if f else None",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    },
    {
      "file": "libs/endoreg-db/tests/helpers/default_objects.py",
      "line": 217,
      "type": "django_settings",
      "code": "temp_dir = Path(settings.MEDIA_ROOT) / \"temp_test_files\"",
      "current": "settings.MEDIA_ROOT",
      "should_use": "from endoreg_db.utils.paths import data_paths"
    }
  ],
  "missing_path_imports": [
    {
      "file": "libs/endoreg-db/endoreg_db/models/utils.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/Frames_NICE_and_PARIS_classifications.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/services/storage_aware_video_processor.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/models/metadata/model_meta_logic.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/models/media/pdf/raw_pdf.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/models/media/video/video_file_ai.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/models/media/video/video_file_segments.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/models/media/video/create_from_file.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/models/media/video/video_file.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/models/media/video/video_file_io.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/_old/raw_pdf_meta_validation.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/_old/raw_video_meta_validation.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/_old/video.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/label_video_segment/label_video_segment.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/meta/pdf_file_meta_extraction.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/meta/video_meta.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/pdf/anony_text_validation.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/report/mixins.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/report/report.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/video/video_file_detail.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/serializers/video/segmentation.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "medium"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/auth/keycloak.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/meta/report_meta.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/misc/secure_file_serving_view.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/misc/secure_file_url_view.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/pdf/pdf_stream_views.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/pdf/reimport.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/video/reimport.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/video/segmentation.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/video/media/video_download_processed.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/endoreg-db/endoreg_db/views/video/media/video_media.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/lx-anonymizer/lx_anonymizer/frame_cleaner.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    },
    {
      "file": "libs/lx-anonymizer/tests/test_frame_cleaner.py",
      "has_path_operations": true,
      "has_paths_import": false,
      "priority": "high"
    }
  ],
  "deprecated_os_path_usage": [],
  "summary": {
    "critical_hardcoded_paths": 18,
    "inconsistent_env_vars": 23,
    "missing_path_imports": 33,
    "total_issues": 74
  }
}