{
  "summary": "Vue 3 + Pinia Test-Suite mit 72.73% Pass Rate zeigt Store-Integration-Probleme durch vi.mock() Hoisting. Hauptprobleme: Store mock data erreicht Komponente nicht, v-if conditional rendering issues, fehlende createTestingPinia Integration. Coverage bei 71.11% lines mit 8/12 branches getestet. Setup grundsätzlich korrekt aber Pinia-Mock-Strategy suboptimal.",
  "scores": {
    "pass_rate_pct": 72.73,
    "coverage_lines_pct": 71.11,
    "coverage_statements_pct": 70.83,
    "coverage_functions_pct": 75.0,
    "coverage_branches_pct": 66.67,
    "setup_correctness_pct": 65,
    "determinism_pct": 60,
    "overall_pct": 67.95
  },
  "verdict": "soft-fail",
  "missing_artifacts": [],
  "findings": [
    {
      "id": "F1",
      "category": "pinia-setup",
      "severity": "high", 
      "evidence": "vi.mock() static mocks don't integrate with component's Pinia store instances. Store mock data (John Doe, Jane Smith) not reaching component, only sees default disabled option",
      "impact": "3/11 tests failing due to store state isolation. Component uses usePatientStore() at runtime but gets different mock instance than vi.mock() provides",
      "fix": {
        "type": "minimal-patch",
        "patch": "Replace vi.mock('@/stores/patientStore') with createTestingPinia({ initialState }) in mount configuration. Remove static vi.mock, use plugin-based store injection",
        "notes": "15-line change fixes all 3 failing tests by providing deterministic store state directly to component"
      }
    },
    {
      "id": "F2", 
      "category": "global-providers",
      "severity": "medium",
      "evidence": "Component v-if conditional rendering not updating after setValue() calls. Button remains disabled despite patientSelect.setValue(1) and examinationSelect.setValue(1)",
      "impact": "2/11 tests failing due to reactive state not triggering DOM updates in test environment",
      "fix": {
        "type": "minimal-patch", 
        "patch": "Add await nextTick() after setValue() calls to ensure Vue reactivity cycle completes before assertions",
        "notes": "Standard Vue testing pattern for async DOM updates"
      }
    },
    {
      "id": "F3",
      "category": "coverage",
      "severity": "low",
      "evidence": "Branch coverage at 66.67% (8/12 branches). Missing error handling branches and edge cases",
      "impact": "4 uncovered branches likely in error states and conditional logic",
      "fix": {
        "type": "minimal-patch",
        "patch": "Add error scenario tests: API failures, empty data states, validation errors",
        "notes": "Target 80%+ branch coverage by testing error paths"
      }
    }
  ],
  "actions": [
    {
      "priority": 1,
      "title": "Implementiere createTestingPinia mit initialState",
      "eta_minutes": 15,
      "depends_on": [],
      "details": "Ersetze vi.mock() durch createTestingPinia in mount config. Definiere initialState mit Patient/Examination mock data. Entferne statische vi.mock calls."
    },
    {
      "priority": 2, 
      "title": "Füge await nextTick() nach setValue() hinzu",
      "eta_minutes": 10,
      "depends_on": ["Implementiere createTestingPinia mit initialState"],
      "details": "Erweitere Tests um await nextTick() nach DOM manipulation für reactive updates. Behebe v-if conditional rendering issues."
    },
    {
      "priority": 3,
      "title": "Erweitere Error-Branch-Coverage", 
      "eta_minutes": 20,
      "depends_on": [],
      "details": "Teste API Fehler-Szenarien, leere Daten-States, Validierungs-Errors. Ziel: 80%+ branch coverage."
    }
  ],
  "metrics": {
    "test_count": 11,
    "passing_tests": 8,
    "failing_tests": 3,
    "coverage_lines": 71.11,
    "coverage_branches": 66.67,
    "coverage_functions": 75.0
  },
  "context": {
    "framework": "Vue 3 + Pinia + Vitest",
    "test_runner": "Vitest 1.6.1",
    "dominant_issues": ["pinia-setup", "global-providers"],
    "quick_wins": ["createTestingPinia", "nextTick async"],
    "estimated_time_to_pass": 25
  }
}
