declare const _default: import("vue").DefineComponent<{}, {
    currentVideoTime: import("vue").Ref<number, number>;
    selectedLabel: import("vue").Ref<string | null, string | null>;
    currentVideoId: import("vue").ComputedRef<string>;
    isPlaying: import("vue").Ref<boolean, boolean>;
    videoStore: import("pinia").Store<"video", import("pinia")._UnwrapAll<Pick<{
        currentVideo: Readonly<import("vue").Ref<{
            readonly id: string | number;
            readonly isAnnotated: boolean;
            readonly errorMessage: string;
            readonly segments: readonly {
                readonly id: string | number;
                readonly label: string;
                readonly label_name: string;
                readonly label_display: string;
                readonly startTime: number;
                readonly endTime: number;
                readonly avgConfidence: number;
                readonly video_id?: number | undefined;
                readonly label_id?: number | undefined;
                readonly start_frame_number?: number | undefined;
                readonly end_frame_number?: number | undefined;
                readonly start_time?: number | undefined;
                readonly end_time?: number | undefined;
                readonly segmentId?: number | undefined;
                readonly segmentStart?: number | undefined;
                readonly segmentEnd?: number | undefined;
            }[];
            readonly videoUrl: string;
            readonly status: import("@/stores/videoStore").VideoStatus;
            readonly assignedUser: string | null;
            readonly duration?: number | undefined;
            readonly fps?: number | undefined;
        } | null, {
            readonly id: string | number;
            readonly isAnnotated: boolean;
            readonly errorMessage: string;
            readonly segments: readonly {
                readonly id: string | number;
                readonly label: string;
                readonly label_name: string;
                readonly label_display: string;
                readonly startTime: number;
                readonly endTime: number;
                readonly avgConfidence: number;
                readonly video_id?: number | undefined;
                readonly label_id?: number | undefined;
                readonly start_frame_number?: number | undefined;
                readonly end_frame_number?: number | undefined;
                readonly start_time?: number | undefined;
                readonly end_time?: number | undefined;
                readonly segmentId?: number | undefined;
                readonly segmentStart?: number | undefined;
                readonly segmentEnd?: number | undefined;
            }[];
            readonly videoUrl: string;
            readonly status: import("@/stores/videoStore").VideoStatus;
            readonly assignedUser: string | null;
            readonly duration?: number | undefined;
            readonly fps?: number | undefined;
        } | null>>;
        errorMessage: Readonly<import("vue").Ref<string, string>>;
        videoUrl: Readonly<import("vue").Ref<string, string>>;
        segmentsByLabel: Record<string, import("@/stores/videoStore").Segment[]>;
        videoList: Readonly<import("vue").Ref<{
            readonly videos: readonly {
                readonly id: number;
                readonly original_file_name: string;
                readonly status: string;
                readonly assignedUser?: string | null | undefined;
                readonly anonymized: boolean;
                readonly duration?: number | undefined;
                readonly fps?: number | undefined;
                readonly hasROI?: boolean | undefined;
                readonly outsideFrameCount?: number | undefined;
            }[];
            readonly labels: readonly {
                readonly id: number;
                readonly name: string;
                readonly color?: string | undefined;
            }[];
        }, {
            readonly videos: readonly {
                readonly id: number;
                readonly original_file_name: string;
                readonly status: string;
                readonly assignedUser?: string | null | undefined;
                readonly anonymized: boolean;
                readonly duration?: number | undefined;
                readonly fps?: number | undefined;
                readonly hasROI?: boolean | undefined;
                readonly outsideFrameCount?: number | undefined;
            }[];
            readonly labels: readonly {
                readonly id: number;
                readonly name: string;
                readonly color?: string | undefined;
            }[];
        }>>;
        videoMeta: Readonly<import("vue").Ref<{
            readonly id: number;
            readonly original_file_name: string;
            readonly status: string;
            readonly assignedUser?: string | null | undefined;
            readonly anonymized: boolean;
            readonly duration?: number | undefined;
            readonly fps?: number | undefined;
            readonly hasROI?: boolean | undefined;
            readonly outsideFrameCount?: number | undefined;
        } | null, {
            readonly id: number;
            readonly original_file_name: string;
            readonly status: string;
            readonly assignedUser?: string | null | undefined;
            readonly anonymized: boolean;
            readonly duration?: number | undefined;
            readonly fps?: number | undefined;
            readonly hasROI?: boolean | undefined;
            readonly outsideFrameCount?: number | undefined;
        } | null>>;
        allSegments: import("vue").ComputedRef<import("@/stores/videoStore").Segment[]>;
        draftSegment: Readonly<import("vue").Ref<{
            readonly start: number;
            readonly end: number | null;
            readonly label: string;
            readonly label_display: string;
            readonly startTime: number;
            readonly endTime: number | null;
            readonly start_time: number;
            readonly end_time: number | null;
        } | null, {
            readonly start: number;
            readonly end: number | null;
            readonly label: string;
            readonly label_display: string;
            readonly startTime: number;
            readonly endTime: number | null;
            readonly start_time: number;
            readonly end_time: number | null;
        } | null>>;
        activeSegment: import("vue").ComputedRef<import("@/stores/videoStore").Segment | null>;
        duration: import("vue").ComputedRef<number>;
        hasVideo: import("vue").ComputedRef<boolean>;
        segments: import("vue").ComputedRef<import("@/stores/videoStore").Segment[]>;
        labels: import("vue").ComputedRef<import("@/stores/videoStore").LabelMeta[]>;
        clearVideo: () => void;
        setVideo: (video: import("@/stores/videoStore").VideoAnnotation) => void;
        fetchVideoUrl: (videoId?: string | number | undefined) => Promise<void>;
        fetchAllSegments: (id: string) => Promise<void>;
        fetchAllVideos: () => Promise<import("@/stores/videoStore").VideoList>;
        fetchVideoMeta: (lastId?: string | undefined) => Promise<any>;
        fetchVideoSegments: (videoId: string) => Promise<void>;
        createSegment: (videoId: string, labelName: string, startTime: number, endTime: number) => Promise<import("@/stores/videoStore").Segment | null>;
        updateSegment: (segmentId: string | number, updates: import("@/stores/videoStore").SegmentUpdatePayload) => Promise<boolean>;
        deleteSegment: (segmentId: string | number) => Promise<boolean>;
        saveAnnotations: () => Promise<void>;
        uploadRevert: (uniqueFileId: string, load: (serverFileId?: string | undefined) => void, error: (message: string) => void) => void;
        uploadProcess: (fieldName: string, file: File, metadata: any, load: (serverFileId?: string | undefined) => void, error: (message: string) => void) => void;
        getSegmentStyle: (segment: import("@/stores/videoStore").Segment, videoDuration: number) => import("@/stores/videoStore").SegmentStyle;
        getColorForLabel: (label: string) => string;
        getTranslationForLabel: (label: string) => string;
        jumpToSegment: (segment: import("@/stores/videoStore").Segment, videoElement: HTMLVideoElement | null) => void;
        setActiveSegment: (segmentId: string | number | null) => void;
        updateVideoStatus: (status: import("@/stores/videoStore").VideoStatus) => Promise<void>;
        assignUserToVideo: (user: string) => Promise<void>;
        startDraft: (label: string, startTime: number, labelDisplay?: string | undefined) => void;
        updateDraftEnd: (endTime: number) => void;
        commitDraft: () => Promise<import("@/stores/videoStore").Segment | null>;
        cancelDraft: () => void;
        createFiveSecondSegment: (clickTime: number, label: string) => Promise<import("@/stores/videoStore").Segment | null>;
        formatTime: (seconds: number) => string;
        getSegmentOptions: () => import("@/stores/videoStore").SegmentOption[];
        clearSegments: () => void;
        loadVideo: (videoId: string) => Promise<void>;
    }, "errorMessage" | "videoUrl" | "currentVideo" | "segmentsByLabel" | "videoList" | "videoMeta" | "draftSegment">>, Pick<{
        currentVideo: Readonly<import("vue").Ref<{
            readonly id: string | number;
            readonly isAnnotated: boolean;
            readonly errorMessage: string;
            readonly segments: readonly {
                readonly id: string | number;
                readonly label: string;
                readonly label_name: string;
                readonly label_display: string;
                readonly startTime: number;
                readonly endTime: number;
                readonly avgConfidence: number;
                readonly video_id?: number | undefined;
                readonly label_id?: number | undefined;
                readonly start_frame_number?: number | undefined;
                readonly end_frame_number?: number | undefined;
                readonly start_time?: number | undefined;
                readonly end_time?: number | undefined;
                readonly segmentId?: number | undefined;
                readonly segmentStart?: number | undefined;
                readonly segmentEnd?: number | undefined;
            }[];
            readonly videoUrl: string;
            readonly status: import("@/stores/videoStore").VideoStatus;
            readonly assignedUser: string | null;
            readonly duration?: number | undefined;
            readonly fps?: number | undefined;
        } | null, {
            readonly id: string | number;
            readonly isAnnotated: boolean;
            readonly errorMessage: string;
            readonly segments: readonly {
                readonly id: string | number;
                readonly label: string;
                readonly label_name: string;
                readonly label_display: string;
                readonly startTime: number;
                readonly endTime: number;
                readonly avgConfidence: number;
                readonly video_id?: number | undefined;
                readonly label_id?: number | undefined;
                readonly start_frame_number?: number | undefined;
                readonly end_frame_number?: number | undefined;
                readonly start_time?: number | undefined;
                readonly end_time?: number | undefined;
                readonly segmentId?: number | undefined;
                readonly segmentStart?: number | undefined;
                readonly segmentEnd?: number | undefined;
            }[];
            readonly videoUrl: string;
            readonly status: import("@/stores/videoStore").VideoStatus;
            readonly assignedUser: string | null;
            readonly duration?: number | undefined;
            readonly fps?: number | undefined;
        } | null>>;
        errorMessage: Readonly<import("vue").Ref<string, string>>;
        videoUrl: Readonly<import("vue").Ref<string, string>>;
        segmentsByLabel: Record<string, import("@/stores/videoStore").Segment[]>;
        videoList: Readonly<import("vue").Ref<{
            readonly videos: readonly {
                readonly id: number;
                readonly original_file_name: string;
                readonly status: string;
                readonly assignedUser?: string | null | undefined;
                readonly anonymized: boolean;
                readonly duration?: number | undefined;
                readonly fps?: number | undefined;
                readonly hasROI?: boolean | undefined;
                readonly outsideFrameCount?: number | undefined;
            }[];
            readonly labels: readonly {
                readonly id: number;
                readonly name: string;
                readonly color?: string | undefined;
            }[];
        }, {
            readonly videos: readonly {
                readonly id: number;
                readonly original_file_name: string;
                readonly status: string;
                readonly assignedUser?: string | null | undefined;
                readonly anonymized: boolean;
                readonly duration?: number | undefined;
                readonly fps?: number | undefined;
                readonly hasROI?: boolean | undefined;
                readonly outsideFrameCount?: number | undefined;
            }[];
            readonly labels: readonly {
                readonly id: number;
                readonly name: string;
                readonly color?: string | undefined;
            }[];
        }>>;
        videoMeta: Readonly<import("vue").Ref<{
            readonly id: number;
            readonly original_file_name: string;
            readonly status: string;
            readonly assignedUser?: string | null | undefined;
            readonly anonymized: boolean;
            readonly duration?: number | undefined;
            readonly fps?: number | undefined;
            readonly hasROI?: boolean | undefined;
            readonly outsideFrameCount?: number | undefined;
        } | null, {
            readonly id: number;
            readonly original_file_name: string;
            readonly status: string;
            readonly assignedUser?: string | null | undefined;
            readonly anonymized: boolean;
            readonly duration?: number | undefined;
            readonly fps?: number | undefined;
            readonly hasROI?: boolean | undefined;
            readonly outsideFrameCount?: number | undefined;
        } | null>>;
        allSegments: import("vue").ComputedRef<import("@/stores/videoStore").Segment[]>;
        draftSegment: Readonly<import("vue").Ref<{
            readonly start: number;
            readonly end: number | null;
            readonly label: string;
            readonly label_display: string;
            readonly startTime: number;
            readonly endTime: number | null;
            readonly start_time: number;
            readonly end_time: number | null;
        } | null, {
            readonly start: number;
            readonly end: number | null;
            readonly label: string;
            readonly label_display: string;
            readonly startTime: number;
            readonly endTime: number | null;
            readonly start_time: number;
            readonly end_time: number | null;
        } | null>>;
        activeSegment: import("vue").ComputedRef<import("@/stores/videoStore").Segment | null>;
        duration: import("vue").ComputedRef<number>;
        hasVideo: import("vue").ComputedRef<boolean>;
        segments: import("vue").ComputedRef<import("@/stores/videoStore").Segment[]>;
        labels: import("vue").ComputedRef<import("@/stores/videoStore").LabelMeta[]>;
        clearVideo: () => void;
        setVideo: (video: import("@/stores/videoStore").VideoAnnotation) => void;
        fetchVideoUrl: (videoId?: string | number | undefined) => Promise<void>;
        fetchAllSegments: (id: string) => Promise<void>;
        fetchAllVideos: () => Promise<import("@/stores/videoStore").VideoList>;
        fetchVideoMeta: (lastId?: string | undefined) => Promise<any>;
        fetchVideoSegments: (videoId: string) => Promise<void>;
        createSegment: (videoId: string, labelName: string, startTime: number, endTime: number) => Promise<import("@/stores/videoStore").Segment | null>;
        updateSegment: (segmentId: string | number, updates: import("@/stores/videoStore").SegmentUpdatePayload) => Promise<boolean>;
        deleteSegment: (segmentId: string | number) => Promise<boolean>;
        saveAnnotations: () => Promise<void>;
        uploadRevert: (uniqueFileId: string, load: (serverFileId?: string | undefined) => void, error: (message: string) => void) => void;
        uploadProcess: (fieldName: string, file: File, metadata: any, load: (serverFileId?: string | undefined) => void, error: (message: string) => void) => void;
        getSegmentStyle: (segment: import("@/stores/videoStore").Segment, videoDuration: number) => import("@/stores/videoStore").SegmentStyle;
        getColorForLabel: (label: string) => string;
        getTranslationForLabel: (label: string) => string;
        jumpToSegment: (segment: import("@/stores/videoStore").Segment, videoElement: HTMLVideoElement | null) => void;
        setActiveSegment: (segmentId: string | number | null) => void;
        updateVideoStatus: (status: import("@/stores/videoStore").VideoStatus) => Promise<void>;
        assignUserToVideo: (user: string) => Promise<void>;
        startDraft: (label: string, startTime: number, labelDisplay?: string | undefined) => void;
        updateDraftEnd: (endTime: number) => void;
        commitDraft: () => Promise<import("@/stores/videoStore").Segment | null>;
        cancelDraft: () => void;
        createFiveSecondSegment: (clickTime: number, label: string) => Promise<import("@/stores/videoStore").Segment | null>;
        formatTime: (seconds: number) => string;
        getSegmentOptions: () => import("@/stores/videoStore").SegmentOption[];
        clearSegments: () => void;
        loadVideo: (videoId: string) => Promise<void>;
    }, "segments" | "duration" | "labels" | "allSegments" | "activeSegment" | "hasVideo">, Pick<{
        currentVideo: Readonly<import("vue").Ref<{
            readonly id: string | number;
            readonly isAnnotated: boolean;
            readonly errorMessage: string;
            readonly segments: readonly {
                readonly id: string | number;
                readonly label: string;
                readonly label_name: string;
                readonly label_display: string;
                readonly startTime: number;
                readonly endTime: number;
                readonly avgConfidence: number;
                readonly video_id?: number | undefined;
                readonly label_id?: number | undefined;
                readonly start_frame_number?: number | undefined;
                readonly end_frame_number?: number | undefined;
                readonly start_time?: number | undefined;
                readonly end_time?: number | undefined;
                readonly segmentId?: number | undefined;
                readonly segmentStart?: number | undefined;
                readonly segmentEnd?: number | undefined;
            }[];
            readonly videoUrl: string;
            readonly status: import("@/stores/videoStore").VideoStatus;
            readonly assignedUser: string | null;
            readonly duration?: number | undefined;
            readonly fps?: number | undefined;
        } | null, {
            readonly id: string | number;
            readonly isAnnotated: boolean;
            readonly errorMessage: string;
            readonly segments: readonly {
                readonly id: string | number;
                readonly label: string;
                readonly label_name: string;
                readonly label_display: string;
                readonly startTime: number;
                readonly endTime: number;
                readonly avgConfidence: number;
                readonly video_id?: number | undefined;
                readonly label_id?: number | undefined;
                readonly start_frame_number?: number | undefined;
                readonly end_frame_number?: number | undefined;
                readonly start_time?: number | undefined;
                readonly end_time?: number | undefined;
                readonly segmentId?: number | undefined;
                readonly segmentStart?: number | undefined;
                readonly segmentEnd?: number | undefined;
            }[];
            readonly videoUrl: string;
            readonly status: import("@/stores/videoStore").VideoStatus;
            readonly assignedUser: string | null;
            readonly duration?: number | undefined;
            readonly fps?: number | undefined;
        } | null>>;
        errorMessage: Readonly<import("vue").Ref<string, string>>;
        videoUrl: Readonly<import("vue").Ref<string, string>>;
        segmentsByLabel: Record<string, import("@/stores/videoStore").Segment[]>;
        videoList: Readonly<import("vue").Ref<{
            readonly videos: readonly {
                readonly id: number;
                readonly original_file_name: string;
                readonly status: string;
                readonly assignedUser?: string | null | undefined;
                readonly anonymized: boolean;
                readonly duration?: number | undefined;
                readonly fps?: number | undefined;
                readonly hasROI?: boolean | undefined;
                readonly outsideFrameCount?: number | undefined;
            }[];
            readonly labels: readonly {
                readonly id: number;
                readonly name: string;
                readonly color?: string | undefined;
            }[];
        }, {
            readonly videos: readonly {
                readonly id: number;
                readonly original_file_name: string;
                readonly status: string;
                readonly assignedUser?: string | null | undefined;
                readonly anonymized: boolean;
                readonly duration?: number | undefined;
                readonly fps?: number | undefined;
                readonly hasROI?: boolean | undefined;
                readonly outsideFrameCount?: number | undefined;
            }[];
            readonly labels: readonly {
                readonly id: number;
                readonly name: string;
                readonly color?: string | undefined;
            }[];
        }>>;
        videoMeta: Readonly<import("vue").Ref<{
            readonly id: number;
            readonly original_file_name: string;
            readonly status: string;
            readonly assignedUser?: string | null | undefined;
            readonly anonymized: boolean;
            readonly duration?: number | undefined;
            readonly fps?: number | undefined;
            readonly hasROI?: boolean | undefined;
            readonly outsideFrameCount?: number | undefined;
        } | null, {
            readonly id: number;
            readonly original_file_name: string;
            readonly status: string;
            readonly assignedUser?: string | null | undefined;
            readonly anonymized: boolean;
            readonly duration?: number | undefined;
            readonly fps?: number | undefined;
            readonly hasROI?: boolean | undefined;
            readonly outsideFrameCount?: number | undefined;
        } | null>>;
        allSegments: import("vue").ComputedRef<import("@/stores/videoStore").Segment[]>;
        draftSegment: Readonly<import("vue").Ref<{
            readonly start: number;
            readonly end: number | null;
            readonly label: string;
            readonly label_display: string;
            readonly startTime: number;
            readonly endTime: number | null;
            readonly start_time: number;
            readonly end_time: number | null;
        } | null, {
            readonly start: number;
            readonly end: number | null;
            readonly label: string;
            readonly label_display: string;
            readonly startTime: number;
            readonly endTime: number | null;
            readonly start_time: number;
            readonly end_time: number | null;
        } | null>>;
        activeSegment: import("vue").ComputedRef<import("@/stores/videoStore").Segment | null>;
        duration: import("vue").ComputedRef<number>;
        hasVideo: import("vue").ComputedRef<boolean>;
        segments: import("vue").ComputedRef<import("@/stores/videoStore").Segment[]>;
        labels: import("vue").ComputedRef<import("@/stores/videoStore").LabelMeta[]>;
        clearVideo: () => void;
        setVideo: (video: import("@/stores/videoStore").VideoAnnotation) => void;
        fetchVideoUrl: (videoId?: string | number | undefined) => Promise<void>;
        fetchAllSegments: (id: string) => Promise<void>;
        fetchAllVideos: () => Promise<import("@/stores/videoStore").VideoList>;
        fetchVideoMeta: (lastId?: string | undefined) => Promise<any>;
        fetchVideoSegments: (videoId: string) => Promise<void>;
        createSegment: (videoId: string, labelName: string, startTime: number, endTime: number) => Promise<import("@/stores/videoStore").Segment | null>;
        updateSegment: (segmentId: string | number, updates: import("@/stores/videoStore").SegmentUpdatePayload) => Promise<boolean>;
        deleteSegment: (segmentId: string | number) => Promise<boolean>;
        saveAnnotations: () => Promise<void>;
        uploadRevert: (uniqueFileId: string, load: (serverFileId?: string | undefined) => void, error: (message: string) => void) => void;
        uploadProcess: (fieldName: string, file: File, metadata: any, load: (serverFileId?: string | undefined) => void, error: (message: string) => void) => void;
        getSegmentStyle: (segment: import("@/stores/videoStore").Segment, videoDuration: number) => import("@/stores/videoStore").SegmentStyle;
        getColorForLabel: (label: string) => string;
        getTranslationForLabel: (label: string) => string;
        jumpToSegment: (segment: import("@/stores/videoStore").Segment, videoElement: HTMLVideoElement | null) => void;
        setActiveSegment: (segmentId: string | number | null) => void;
        updateVideoStatus: (status: import("@/stores/videoStore").VideoStatus) => Promise<void>;
        assignUserToVideo: (user: string) => Promise<void>;
        startDraft: (label: string, startTime: number, labelDisplay?: string | undefined) => void;
        updateDraftEnd: (endTime: number) => void;
        commitDraft: () => Promise<import("@/stores/videoStore").Segment | null>;
        cancelDraft: () => void;
        createFiveSecondSegment: (clickTime: number, label: string) => Promise<import("@/stores/videoStore").Segment | null>;
        formatTime: (seconds: number) => string;
        getSegmentOptions: () => import("@/stores/videoStore").SegmentOption[];
        clearSegments: () => void;
        loadVideo: (videoId: string) => Promise<void>;
    }, "clearVideo" | "setVideo" | "fetchVideoUrl" | "fetchAllSegments" | "fetchAllVideos" | "fetchVideoMeta" | "fetchVideoSegments" | "createSegment" | "updateSegment" | "deleteSegment" | "saveAnnotations" | "uploadRevert" | "uploadProcess" | "getSegmentStyle" | "getColorForLabel" | "getTranslationForLabel" | "jumpToSegment" | "setActiveSegment" | "updateVideoStatus" | "assignUserToVideo" | "startDraft" | "updateDraftEnd" | "commitDraft" | "cancelDraft" | "createFiveSecondSegment" | "formatTime" | "getSegmentOptions" | "clearSegments" | "loadVideo">>;
    hasActiveDraft: import("vue").ComputedRef<boolean>;
    activeDraftLabel: import("vue").ComputedRef<string>;
    canFinishDraft: import("vue").ComputedRef<boolean>;
    onLabelSelect: (selectedLabelValue: string) => void;
    startLabelMarking: (label: string) => void;
    finishLabelMarking: () => Promise<void>;
    cancelLabelMarking: () => void;
    handleCreateSegment: (event: MouseEvent, clickTime: number) => Promise<void>;
    handleTimelineSeek: (time: number) => void;
    handleSegmentResize: (segmentId: number | string, newTime: number, newFrame: number, isStart: boolean) => Promise<void>;
    refreshSegments: () => Promise<void>;
    deleteSegment: (segmentId: number | string) => Promise<void>;
    videoRef: import("vue").Ref<HTMLVideoElement | null, HTMLVideoElement | null>;
    onVideoTimeUpdate: () => void;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {
    Timeline: import("vue").DefineComponent<{
        video?: {
            duration?: number | undefined;
        } | null | undefined;
        segments?: import("@/stores/videoStore").Segment[] | undefined;
        labels?: import("@/stores/videoStore").LabelMeta[] | undefined;
        currentTime?: number | undefined;
        isPlaying?: boolean | undefined;
        activeSegmentId?: string | number | null | undefined;
        showWaveform?: boolean | undefined;
        selectionMode?: boolean | undefined;
        fps?: number | undefined;
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        [x: string]: any;
    }, string, import("vue").PublicProps, Readonly<{
        video?: {
            duration?: number | undefined;
        } | null | undefined;
        segments?: import("@/stores/videoStore").Segment[] | undefined;
        labels?: import("@/stores/videoStore").LabelMeta[] | undefined;
        currentTime?: number | undefined;
        isPlaying?: boolean | undefined;
        activeSegmentId?: string | number | null | undefined;
        showWaveform?: boolean | undefined;
        selectionMode?: boolean | undefined;
        fps?: number | undefined;
    }> & Readonly<{
        [x: `on${Capitalize<any>}`]: ((...args: any) => any) | undefined;
    }>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {
        timeline: HTMLDivElement;
        waveformCanvas: HTMLCanvasElement;
    }, HTMLDivElement>;
}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default _default;
