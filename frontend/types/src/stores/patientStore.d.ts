import type { Patient, PatientFormData, Gender, Center } from '@/api/patientService';
export type { Patient, PatientFormData, Gender, Center } from '@/api/patientService';
export declare const usePatientStore: import("pinia").StoreDefinition<"patient", Pick<{
    patients: import("vue").Ref<{
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[], Patient[] | {
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    currentPatient: import("vue").Ref<{
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    } | null, Patient | {
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    } | null>;
    selectedPatientId: import("vue").Ref<number | null, number | null>;
    genders: import("vue").Ref<{
        id: number;
        name: string;
        nameDe?: string | undefined;
        nameEn?: string | undefined;
        abbreviation?: string | undefined;
        description?: string | undefined;
    }[], Gender[] | {
        id: number;
        name: string;
        nameDe?: string | undefined;
        nameEn?: string | undefined;
        abbreviation?: string | undefined;
        description?: string | undefined;
    }[]>;
    centers: import("vue").Ref<{
        id: number;
        name: string;
        nameDe?: string | undefined;
        nameEn?: string | undefined;
        description?: string | undefined;
    }[], Center[] | {
        id: number;
        name: string;
        nameDe?: string | undefined;
        nameEn?: string | undefined;
        description?: string | undefined;
    }[]>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    patientCount: import("vue").ComputedRef<number>;
    patientsWithAge: import("vue").ComputedRef<{
        age: number | null;
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    patientsWithDisplayName: import("vue").ComputedRef<{
        displayName: string;
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    fetchPatients: () => Promise<void>;
    fetchGenders: () => Promise<void>;
    fetchCenters: () => Promise<void>;
    loadGenders: () => Promise<void>;
    loadCenters: () => Promise<void>;
    initializeLookupData: () => Promise<void>;
    createPatient: (patientData: PatientFormData) => Promise<any>;
    updatePatient: (id: number, patientData: PatientFormData) => Promise<any>;
    deletePatient: (id: number) => Promise<void>;
    clearError: () => void;
    getPatientById: (id: number) => Patient | undefined;
    calculatePatientAge: (dobString: string) => number | null;
    getGenderDisplayName: (genderName: string | null | undefined) => string;
    getCenterDisplayName: (centerName: string | null | undefined) => string;
    validatePatientForm: (formData: PatientFormData) => {
        isValid: boolean;
        errors: string[];
    };
    formatPatientForSubmission: (formData: PatientFormData) => PatientFormData;
    clearCurrentPatient: () => void;
    getCurrentPatient: () => Patient | null;
    setSelectedPatientId: (id: number | null) => void;
    getSelectedPatientId: () => number | null;
    clearSelectedPatientId: () => void;
    setCurrentPatient: (p: Patient | null) => void;
    resolveCurrentPatientId: (propId?: number, strict?: boolean) => number | null;
}, "loading" | "error" | "patients" | "currentPatient" | "selectedPatientId" | "genders" | "centers">, Pick<{
    patients: import("vue").Ref<{
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[], Patient[] | {
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    currentPatient: import("vue").Ref<{
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    } | null, Patient | {
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    } | null>;
    selectedPatientId: import("vue").Ref<number | null, number | null>;
    genders: import("vue").Ref<{
        id: number;
        name: string;
        nameDe?: string | undefined;
        nameEn?: string | undefined;
        abbreviation?: string | undefined;
        description?: string | undefined;
    }[], Gender[] | {
        id: number;
        name: string;
        nameDe?: string | undefined;
        nameEn?: string | undefined;
        abbreviation?: string | undefined;
        description?: string | undefined;
    }[]>;
    centers: import("vue").Ref<{
        id: number;
        name: string;
        nameDe?: string | undefined;
        nameEn?: string | undefined;
        description?: string | undefined;
    }[], Center[] | {
        id: number;
        name: string;
        nameDe?: string | undefined;
        nameEn?: string | undefined;
        description?: string | undefined;
    }[]>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    patientCount: import("vue").ComputedRef<number>;
    patientsWithAge: import("vue").ComputedRef<{
        age: number | null;
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    patientsWithDisplayName: import("vue").ComputedRef<{
        displayName: string;
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    fetchPatients: () => Promise<void>;
    fetchGenders: () => Promise<void>;
    fetchCenters: () => Promise<void>;
    loadGenders: () => Promise<void>;
    loadCenters: () => Promise<void>;
    initializeLookupData: () => Promise<void>;
    createPatient: (patientData: PatientFormData) => Promise<any>;
    updatePatient: (id: number, patientData: PatientFormData) => Promise<any>;
    deletePatient: (id: number) => Promise<void>;
    clearError: () => void;
    getPatientById: (id: number) => Patient | undefined;
    calculatePatientAge: (dobString: string) => number | null;
    getGenderDisplayName: (genderName: string | null | undefined) => string;
    getCenterDisplayName: (centerName: string | null | undefined) => string;
    validatePatientForm: (formData: PatientFormData) => {
        isValid: boolean;
        errors: string[];
    };
    formatPatientForSubmission: (formData: PatientFormData) => PatientFormData;
    clearCurrentPatient: () => void;
    getCurrentPatient: () => Patient | null;
    setSelectedPatientId: (id: number | null) => void;
    getSelectedPatientId: () => number | null;
    clearSelectedPatientId: () => void;
    setCurrentPatient: (p: Patient | null) => void;
    resolveCurrentPatientId: (propId?: number, strict?: boolean) => number | null;
}, "patientCount" | "patientsWithAge" | "patientsWithDisplayName">, Pick<{
    patients: import("vue").Ref<{
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[], Patient[] | {
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    currentPatient: import("vue").Ref<{
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    } | null, Patient | {
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    } | null>;
    selectedPatientId: import("vue").Ref<number | null, number | null>;
    genders: import("vue").Ref<{
        id: number;
        name: string;
        nameDe?: string | undefined;
        nameEn?: string | undefined;
        abbreviation?: string | undefined;
        description?: string | undefined;
    }[], Gender[] | {
        id: number;
        name: string;
        nameDe?: string | undefined;
        nameEn?: string | undefined;
        abbreviation?: string | undefined;
        description?: string | undefined;
    }[]>;
    centers: import("vue").Ref<{
        id: number;
        name: string;
        nameDe?: string | undefined;
        nameEn?: string | undefined;
        description?: string | undefined;
    }[], Center[] | {
        id: number;
        name: string;
        nameDe?: string | undefined;
        nameEn?: string | undefined;
        description?: string | undefined;
    }[]>;
    loading: import("vue").Ref<boolean, boolean>;
    error: import("vue").Ref<string | null, string | null>;
    patientCount: import("vue").ComputedRef<number>;
    patientsWithAge: import("vue").ComputedRef<{
        age: number | null;
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    patientsWithDisplayName: import("vue").ComputedRef<{
        displayName: string;
        id?: number | undefined;
        firstName: string;
        lastName: string;
        dob?: string | null | undefined;
        gender?: string | null | undefined;
        center?: string | null | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        patientHash?: string | null | undefined;
        comments?: string | undefined;
        isRealPerson?: boolean | undefined;
        pseudonymFirstName?: string | null | undefined;
        pseudonymLastName?: string | null | undefined;
        sensitiveMetaId?: number | null | undefined;
        age?: number | null | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    }[]>;
    fetchPatients: () => Promise<void>;
    fetchGenders: () => Promise<void>;
    fetchCenters: () => Promise<void>;
    loadGenders: () => Promise<void>;
    loadCenters: () => Promise<void>;
    initializeLookupData: () => Promise<void>;
    createPatient: (patientData: PatientFormData) => Promise<any>;
    updatePatient: (id: number, patientData: PatientFormData) => Promise<any>;
    deletePatient: (id: number) => Promise<void>;
    clearError: () => void;
    getPatientById: (id: number) => Patient | undefined;
    calculatePatientAge: (dobString: string) => number | null;
    getGenderDisplayName: (genderName: string | null | undefined) => string;
    getCenterDisplayName: (centerName: string | null | undefined) => string;
    validatePatientForm: (formData: PatientFormData) => {
        isValid: boolean;
        errors: string[];
    };
    formatPatientForSubmission: (formData: PatientFormData) => PatientFormData;
    clearCurrentPatient: () => void;
    getCurrentPatient: () => Patient | null;
    setSelectedPatientId: (id: number | null) => void;
    getSelectedPatientId: () => number | null;
    clearSelectedPatientId: () => void;
    setCurrentPatient: (p: Patient | null) => void;
    resolveCurrentPatientId: (propId?: number, strict?: boolean) => number | null;
}, "fetchPatients" | "fetchGenders" | "fetchCenters" | "loadGenders" | "loadCenters" | "initializeLookupData" | "createPatient" | "updatePatient" | "deletePatient" | "clearError" | "getPatientById" | "calculatePatientAge" | "getGenderDisplayName" | "getCenterDisplayName" | "validatePatientForm" | "formatPatientForSubmission" | "clearCurrentPatient" | "getCurrentPatient" | "setSelectedPatientId" | "getSelectedPatientId" | "clearSelectedPatientId" | "setCurrentPatient" | "resolveCurrentPatientId">>;
