openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/annotations/:
    post:
      operationId: annotations_create
      description: |-
        Create a new annotation.
        If annotation type is 'segment', creates a user-source LabelVideoSegment.
      tags:
      - annotations
      security:
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/annotations/{annotation_id}/:
    patch:
      operationId: annotations_partial_update
      description: Update an existing LabelVideoSegment, treating it as a manual annotation.
      parameters:
      - in: path
        name: annotation_id
        schema:
          type: integer
        required: true
      tags:
      - annotations
      security:
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/anonymization/{file_id}/current/:
    get:
      operationId: anonymization_current_retrieve
      description: Set current file for validation and return patient data
      parameters:
      - in: path
        name: file_id
        schema:
          type: integer
        required: true
      tags:
      - anonymization
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: anonymization_current_create
      description: Set current file for validation and return patient data
      parameters:
      - in: path
        name: file_id
        schema:
          type: integer
        required: true
      tags:
      - anonymization
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: anonymization_current_update
      description: Set current file for validation and return patient data
      parameters:
      - in: path
        name: file_id
        schema:
          type: integer
        required: true
      tags:
      - anonymization
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/anonymization/{file_id}/start/:
    post:
      operationId: anonymization_start_create
      description: Start anonymization with processing lock to prevent duplicates.
      parameters:
      - in: path
        name: file_id
        schema:
          type: integer
        required: true
      tags:
      - anonymization
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/anonymization/{file_id}/status/:
    get:
      operationId: anonymization_status_retrieve
      description: Get anonymization status with polling rate limiting.
      parameters:
      - in: path
        name: file_id
        schema:
          type: integer
        required: true
      tags:
      - anonymization
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/anonymization/{file_id}/validate/:
    post:
      operationId: anonymization_validate_create
      description: |-
        POST /api/anonymization/<int:item_id>/validate/
        Body: {
          // common SensitiveMeta fields (snake_case):
          "patient_first_name": "...",
          "patient_last_name":  "...",
          "patient_dob":        "YYYY-MM-DD",
          "examination_date":   "YYYY-MM-DD",
          "casenumber":         "...",
          "anonymized_text":    "...",   # only for PDFs; ignored by videos
          "is_verified": true            # optional; defaults to true here
        }
      parameters:
      - in: path
        name: file_id
        schema:
          type: integer
        required: true
      tags:
      - anonymization
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/anonymization/clear-locks/:
    delete:
      operationId: anonymization_clear_locks_destroy
      description: |-
        DELETE /api/anonymization/clear-locks/
        Emergency endpoint to clear all processing locks
      tags:
      - anonymization
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/anonymization/items/overview/:
    get:
      operationId: anonymization_items_overview_list
      description: |-
        GET /api/anonymization/items/overview/
        --------------------------------------
        Returns a flat list (Video + PDF) ordered by newest upload first.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - anonymization
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFileOverviewList'
          description: ''
  /api/anonymization/polling-info/:
    get:
      operationId: anonymization_polling_info_retrieve
      description: |-
        GET /api/anonymization/polling-info/
        Get information about polling coordinator status
      tags:
      - anonymization
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/available-files/:
    get:
      operationId: available_files_retrieve
      description: |-
        List available PDF and video files for anonymization selection.

        Query Parameters:
        - type: Filter by file type ('pdf' or 'video')
        - status: Filter by anonymization status
        - limit: Number of results to return (default 50, max 100)
        - offset: Offset for pagination (default 0)

        Returns:
        {
            "pdfs": [...],
            "videos": [...],
            "total_pdfs": N,
            "total_videos": N
        }
      tags:
      - available-files
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/centers/:
    get:
      operationId: centers_list
      description: API endpoint für Center-Optionen (nur lesend)
      tags:
      - centers
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Center'
          description: ''
  /api/centers/{id}/:
    get:
      operationId: centers_retrieve
      description: API endpoint für Center-Optionen (nur lesend)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this center.
        required: true
      tags:
      - centers
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Center'
          description: ''
  /api/classifications/:
    get:
      operationId: classifications_list
      tags:
      - classifications
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FindingClassification'
          description: ''
  /api/classifications/{id}/:
    get:
      operationId: classifications_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this finding classification.
        required: true
      tags:
      - classifications
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindingClassification'
          description: ''
  /api/classifications/{id}/choices/:
    get:
      operationId: classifications_choices_retrieve
      description: |-
        Get choices for a specific location classification.
        Called by: GET /api/finding-classifications/{id}/choices/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this finding classification.
        required: true
      tags:
      - classifications
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindingClassification'
          description: ''
  /api/evaluate-requirements/:
    post:
      operationId: evaluate_requirements_create
      description: |-
        Evaluate requirements based on the logic expressed in RequirementLinks data.

        Expects a JSON payload with the following structure:
        {
            "requirement_set_ids": [<requirement_set_ids>],
            "patient_examination_id": <patient_examination_id>
        }

        If requirement_set_ids is not provided, all RequirementSets will be evaluated.

        Returns a JSON response with the evaluation results:
        {
            "results": [
                {
                    "requirement_name": <requirement_name>,
                    "met": <true/false>,
                    "details": <additional_details>
                },
                ...
            ]
        }
      tags:
      - evaluate-requirements
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/examinations/:
    get:
      operationId: examinations_list
      description: ViewSet for handling Examination related operations.
      tags:
      - examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Examination'
          description: ''
  /api/examinations/{examination_id}/findings/:
    get:
      operationId: examinations_findings_retrieve
      description: |-
        Retrieve findings for an examination.

        Query Parameters:
            format (str): Response format - 'optimized' or 'multilingual' (default: 'optimized')
      parameters:
      - in: path
        name: examination_id
        schema:
          type: integer
        required: true
      tags:
      - examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/examinations/{id}/:
    get:
      operationId: examinations_retrieve
      description: ViewSet for handling Examination related operations.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Examination.
        required: true
      tags:
      - examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Examination'
          description: ''
  /api/examinations/{id}/findings/:
    get:
      operationId: examinations_findings_retrieve_2
      description: |-
        Get findings associated with a specific examination.
        Called by: GET /api/examinations/{id}/findings/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Examination.
        required: true
      tags:
      - examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Examination'
          description: ''
  /api/findings/:
    get:
      operationId: findings_list
      tags:
      - findings
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Finding'
          description: ''
  /api/findings/{finding_id}/classifications/:
    get:
      operationId: findings_classifications_retrieve
      parameters:
      - in: path
        name: finding_id
        schema:
          type: integer
        required: true
      tags:
      - findings
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/findings/{id}/:
    get:
      operationId: findings_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this finding.
        required: true
      tags:
      - findings
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Finding'
          description: ''
  /api/findings/{id}/location_classifications/:
    get:
      operationId: findings_location_classifications_retrieve
      description: |-
        Get location classifications for a specific finding.
        Called by: GET /api/findings/{id}/location-classifications/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this finding.
        required: true
      tags:
      - findings
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Finding'
          description: ''
  /api/findings/{id}/morphology_classifications/:
    get:
      operationId: findings_morphology_classifications_retrieve
      description: |-
        Get morphology classifications for a specific finding.
        Called by: GET /api/findings/{id}/morphology-classifications/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this finding.
        required: true
      tags:
      - findings
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Finding'
          description: ''
  /api/genders/:
    get:
      operationId: genders_list
      description: |-
        API endpoint for Gender options.
        Provides read-only access to gender choices for patient forms.
      tags:
      - genders
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gender'
          description: ''
  /api/genders/{id}/:
    get:
      operationId: genders_retrieve
      description: |-
        API endpoint for Gender options.
        Provides read-only access to gender choices for patient forms.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this gender.
        required: true
      tags:
      - genders
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gender'
          description: ''
  /api/lookup/{id}/all/:
    get:
      operationId: lookup_all_retrieve
      description: |-
        Endpoints:
          POST /api/lookup/init/           { "patient_examination_id": 123 }
          GET  /api/lookup/{token}/all/
          GET  /api/lookup/{token}/parts/?keys=availableFindings,classificationChoices
          PATCH /api/lookup/{token}/parts/ { "updates": { "selectedRequirementSetIds": [1,2] } }
          POST /api/lookup/{token}/recompute/  # Recompute derived data
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - lookup
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/lookup/{id}/parts/:
    get:
      operationId: lookup_parts_retrieve
      description: |-
        Endpoints:
          POST /api/lookup/init/           { "patient_examination_id": 123 }
          GET  /api/lookup/{token}/all/
          GET  /api/lookup/{token}/parts/?keys=availableFindings,classificationChoices
          PATCH /api/lookup/{token}/parts/ { "updates": { "selectedRequirementSetIds": [1,2] } }
          POST /api/lookup/{token}/recompute/  # Recompute derived data
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - lookup
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: lookup_parts_partial_update
      description: |-
        Endpoints:
          POST /api/lookup/init/           { "patient_examination_id": 123 }
          GET  /api/lookup/{token}/all/
          GET  /api/lookup/{token}/parts/?keys=availableFindings,classificationChoices
          PATCH /api/lookup/{token}/parts/ { "updates": { "selectedRequirementSetIds": [1,2] } }
          POST /api/lookup/{token}/recompute/  # Recompute derived data
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - lookup
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/lookup/{id}/recompute/:
    post:
      operationId: lookup_recompute_create
      description: Recompute lookup data based on current PatientExamination and user
        selections
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - lookup
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/lookup/init/:
    post:
      operationId: lookup_init_create
      description: |-
        Endpoints:
          POST /api/lookup/init/           { "patient_examination_id": 123 }
          GET  /api/lookup/{token}/all/
          GET  /api/lookup/{token}/parts/?keys=availableFindings,classificationChoices
          PATCH /api/lookup/{token}/parts/ { "updates": { "selectedRequirementSetIds": [1,2] } }
          POST /api/lookup/{token}/recompute/  # Recompute derived data
      tags:
      - lookup
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/lvs/by-label-name/{label_name}/by-video-id/{video_id}/:
    get:
      operationId: lvs_by_label_name_by_video_id_retrieve
      description: |-
        Handles creation and retrieval of labeled video segments.
        GET lists all labeled video segments, filtered by video ID and label name.
        Returns appropriate error responses for invalid input or missing referenced objects.
      parameters:
      - in: path
        name: label_name
        schema:
          type: string
        required: true
      - in: path
        name: video_id
        schema:
          type: integer
        required: true
      tags:
      - lvs
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/media-management/cleanup/:
    get:
      operationId: media_management_cleanup_retrieve
      description: |-
        GET /api/media-management/status/
        Get overview of media status and cleanup opportunities
      tags:
      - media-management
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: media_management_cleanup_destroy
      description: |-
        DELETE /api/media-management/cleanup/
        Cleanup unfinished, failed, or stale media processing entries
      tags:
      - media-management
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/media-management/force-remove/{file_id}/:
    delete:
      operationId: media_management_force_remove_destroy
      description: |-
        DELETE /api/media-management/force-remove/{file_id}/
        Force remove a specific media item regardless of status
      parameters:
      - in: path
        name: file_id
        schema:
          type: integer
        required: true
      tags:
      - media-management
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/media-management/reset-status/{file_id}/:
    post:
      operationId: media_management_reset_status_create
      description: |-
        POST /api/media-management/reset-status/{file_id}/
        Reset processing status for a stuck/failed media item
      parameters:
      - in: path
        name: file_id
        schema:
          type: integer
        required: true
      tags:
      - media-management
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/media-management/status/:
    get:
      operationId: media_management_status_retrieve
      description: |-
        GET /api/media-management/status/
        Get overview of media status and cleanup opportunities
      tags:
      - media-management
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: media_management_status_destroy
      description: |-
        DELETE /api/media-management/cleanup/
        Cleanup unfinished, failed, or stale media processing entries
      tags:
      - media-management
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/media/pdfs/:
    get:
      operationId: media_pdfs_retrieve
      description: |-
        Handles both:
        - Fetching PDF metadata (if `id` is NOT provided)
        - Streaming the actual PDF file (if `id` is provided)
      tags:
      - media
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/media/pdfs/{id}/:
    get:
      operationId: media_pdfs_retrieve_2
      description: |-
        Handles both:
        - Fetching PDF metadata (if `id` is NOT provided)
        - Streaming the actual PDF file (if `id` is provided)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - media
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/media/pdfs/{id}/stream/:
    get:
      operationId: media_pdfs_stream_retrieve
      description: |-
        Handles both:
        - Fetching PDF metadata (if `id` is NOT provided)
        - Streaming the actual PDF file (if `id` is provided)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - media
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/media/videos/:
    get:
      operationId: media_videos_retrieve
      description: |-
        One endpoint that does
          GET /api/media/videos/          →   next video meta
          GET /api/media/videos/?last_id=7
          GET /api/media/videos/42/       →   meta for id 42
          GET /api/media/videos/42/  (Accept≠JSON)  →  byte‐range stream
          PATCH /api/media/videos/42/     →   update sensitive meta and handle raw file deletion
      tags:
      - media
      security:
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: media_videos_partial_update
      description: |-
        One endpoint that does
          GET /api/media/videos/          →   next video meta
          GET /api/media/videos/?last_id=7
          GET /api/media/videos/42/       →   meta for id 42
          GET /api/media/videos/42/  (Accept≠JSON)  →  byte‐range stream
          PATCH /api/media/videos/42/     →   update sensitive meta and handle raw file deletion
      tags:
      - media
      security:
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/media/videos/{id}/:
    get:
      operationId: media_videos_retrieve_2
      description: |-
        One endpoint that does
          GET /api/media/videos/          →   next video meta
          GET /api/media/videos/?last_id=7
          GET /api/media/videos/42/       →   meta for id 42
          GET /api/media/videos/42/  (Accept≠JSON)  →  byte‐range stream
          PATCH /api/media/videos/42/     →   update sensitive meta and handle raw file deletion
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - media
      security:
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: media_videos_partial_update_2
      description: |-
        One endpoint that does
          GET /api/media/videos/          →   next video meta
          GET /api/media/videos/?last_id=7
          GET /api/media/videos/42/       →   meta for id 42
          GET /api/media/videos/42/  (Accept≠JSON)  →  byte‐range stream
          PATCH /api/media/videos/42/     →   update sensitive meta and handle raw file deletion
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - media
      security:
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/media/videos/{id}/stream/:
    get:
      operationId: media_videos_stream_retrieve
      description: Streams the raw video file for the specified video with HTTP range
        and CORS support.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - media
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/patient-examinations/{exam_id}/classifications/:
    get:
      operationId: patient_examinations_classifications_retrieve
      description: |-
        Retrieves all classifications for a specific examination.

        Returns a list of all FindingClassification objects linked to the given examination.
      parameters:
      - in: path
        name: exam_id
        schema:
          type: integer
        required: true
      tags:
      - patient-examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/patient-examinations/{id}/:
    get:
      operationId: patient_examinations_retrieve
      description: |-
        Retrieve and update PatientExamination instances.
        GET /api/examinations/{id}/
        PATCH /api/examinations/{id}/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - patient-examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientExamination'
          description: ''
    put:
      operationId: patient_examinations_update
      description: |-
        Retrieve and update PatientExamination instances.
        GET /api/examinations/{id}/
        PATCH /api/examinations/{id}/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - patient-examinations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientExamination'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatientExamination'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatientExamination'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientExamination'
          description: ''
    patch:
      operationId: patient_examinations_partial_update
      description: |-
        Retrieve and update PatientExamination instances.
        GET /api/examinations/{id}/
        PATCH /api/examinations/{id}/
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - patient-examinations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPatientExamination'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPatientExamination'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPatientExamination'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientExamination'
          description: ''
  /api/patient-examinations/create/:
    post:
      operationId: patient_examinations_create_create
      description: |-
        Create new PatientExamination instances.
        POST /api/examinations/create/

        Expected payload:
        {
            "patient": "patient_hash_string",  # or patient_id integer
            "examination": "examination_name", # examination name string
            "date_start": "2024-01-15",
        }
      tags:
      - patient-examinations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientExamination'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatientExamination'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatientExamination'
        required: true
      security:
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientExamination'
          description: ''
  /api/patient-examinations/list/:
    get:
      operationId: patient_examinations_list_list
      description: |-
        List PatientExamination instances with filtering.
        GET /api/examinations/list/

        Query parameters:
        - patient_id: Filter by patient ID
        - examination_name: Filter by examination name
        - limit: Number of results (default 20)
        - offset: Pagination offset (default 0)
      tags:
      - patient-examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PatientExamination'
          description: ''
  /api/patient-findings/:
    get:
      operationId: patient_findings_list
      tags:
      - patient-findings
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PatientFinding'
          description: ''
    post:
      operationId: patient_findings_create
      tags:
      - patient-findings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientFinding'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatientFinding'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatientFinding'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientFinding'
          description: ''
  /api/patient-findings/{id}/:
    get:
      operationId: patient_findings_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Patient Finding.
        required: true
      tags:
      - patient-findings
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientFinding'
          description: ''
    put:
      operationId: patient_findings_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Patient Finding.
        required: true
      tags:
      - patient-findings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientFinding'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatientFinding'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatientFinding'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientFinding'
          description: ''
    patch:
      operationId: patient_findings_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Patient Finding.
        required: true
      tags:
      - patient-findings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPatientFinding'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPatientFinding'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPatientFinding'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientFinding'
          description: ''
    delete:
      operationId: patient_findings_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Patient Finding.
        required: true
      tags:
      - patient-findings
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/patients/:
    get:
      operationId: patients_list
      description: API endpoint for managing patients.
      tags:
      - patients
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
          description: ''
    post:
      operationId: patients_create
      description: API endpoint for managing patients.
      tags:
      - patients
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Patient'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Patient'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
          description: ''
  /api/patients/{id}/:
    get:
      operationId: patients_retrieve
      description: API endpoint for managing patients.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this patient.
        required: true
      tags:
      - patients
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
          description: ''
    put:
      operationId: patients_update
      description: Erweiterte Logik für das Aktualisieren von Patienten
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this patient.
        required: true
      tags:
      - patients
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Patient'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Patient'
        required: true
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
          description: ''
    patch:
      operationId: patients_partial_update
      description: API endpoint for managing patients.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this patient.
        required: true
      tags:
      - patients
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPatient'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPatient'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPatient'
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
          description: ''
    delete:
      operationId: patients_destroy
      description: Delete a patient with proper error handling and cascade protection.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this patient.
        required: true
      tags:
      - patients
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/patients/{id}/check_deletion_safety/:
    get:
      operationId: patients_check_deletion_safety_retrieve
      description: |-
        Check if a patient can be safely deleted.
        Returns information about related objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this patient.
        required: true
      tags:
      - patients
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
          description: ''
  /api/patients/patient_count/:
    get:
      operationId: patients_patient_count_retrieve
      description: Gibt die Anzahl der Patienten zurück
      tags:
      - patients
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
          description: ''
  /api/pdf/sensitivemeta/:
    get:
      operationId: pdf_sensitivemeta_retrieve
      description: |-
        Retrieve SensitiveMeta details for display and annotation.

        Supports both URL parameter and query parameter access patterns:
        - /api/pdf/sensitivemeta/123/ (URL parameter)
        - /api/pdf/sensitivemeta/?id=123 (query parameter - for backward compatibility)
        - /api/pdf/sensitivemeta/ (list all - returns empty list instead of 400)

        Returns detailed information suitable for user verification.
      tags:
      - pdf
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: pdf_sensitivemeta_partial_update
      description: |-
        Update SensitiveMeta fields including verification state.

        Accepts partial updates for any field in SensitiveMetaUpdateSerializer.
        Special handling for verification state changes.
      tags:
      - pdf
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/pdf/sensitivemeta/{sensitive_meta_id}/:
    get:
      operationId: pdf_sensitivemeta_retrieve_2
      description: |-
        Retrieve SensitiveMeta details for display and annotation.

        Supports both URL parameter and query parameter access patterns:
        - /api/pdf/sensitivemeta/123/ (URL parameter)
        - /api/pdf/sensitivemeta/?id=123 (query parameter - for backward compatibility)
        - /api/pdf/sensitivemeta/ (list all - returns empty list instead of 400)

        Returns detailed information suitable for user verification.
      parameters:
      - in: path
        name: sensitive_meta_id
        schema:
          type: integer
        required: true
      tags:
      - pdf
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: pdf_sensitivemeta_partial_update_2
      description: |-
        Update SensitiveMeta fields including verification state.

        Accepts partial updates for any field in SensitiveMetaUpdateSerializer.
        Special handling for verification state changes.
      parameters:
      - in: path
        name: sensitive_meta_id
        schema:
          type: integer
        required: true
      tags:
      - pdf
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/pdf/sensitivemeta/list/:
    get:
      operationId: pdf_sensitivemeta_list_retrieve
      description: |-
        List SensitiveMeta entries with optional filtering.

        Query Parameters:
        - verified: Filter by verification status (true/false)
        - center: Filter by center name
        - limit: Number of results to return (default 20)
        - offset: Offset for pagination (default 0)
      tags:
      - pdf
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/pdf/sensitivemeta/verify/:
    post:
      operationId: pdf_sensitivemeta_verify_create
      description: |-
        Update verification state for a SensitiveMeta instance.

        Expected payload:
        {
            "sensitive_meta_id": 123,
            "dob_verified": true,
            "names_verified": true
        }
      tags:
      - pdf
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/reports/:
    get:
      operationId: reports_retrieve
      description: |-
        API-Endpunkt für paginierte Report-Listen mit optionaler Filterung
        GET /api/reports/
      tags:
      - reports
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/reports/{report_id}/file-metadata/:
    get:
      operationId: reports_file_metadata_retrieve
      description: |-
        API-Endpunkt für Report-Datei-Metadaten
        GET /api/reports/{report_id}/file-metadata/
      parameters:
      - in: path
        name: report_id
        schema:
          type: integer
        required: true
      tags:
      - reports
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/reports/{report_id}/secure-file/:
    get:
      operationId: reports_secure_file_retrieve
      description: |-
        Serviert Dateien über sichere URLs mit Token-Validierung
        GET /api/reports/{report_id}/secure-file/?token={token}
      parameters:
      - in: path
        name: report_id
        schema:
          type: integer
        required: true
      tags:
      - reports
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/reports/{report_id}/with-secure-url/:
    get:
      operationId: reports_with_secure_url_retrieve
      description: |-
        API-Endpunkt für Reports mit sicherer URL-Generierung
        GET /api/reports/{report_id}/with-secure-url/
      parameters:
      - in: path
        name: report_id
        schema:
          type: integer
        required: true
      tags:
      - reports
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/save-anonymization-annotation-video/{annotation_id}/:
    get:
      operationId: save_anonymization_annotation_video_retrieve
      description: |-
        Retrieve SensitiveMeta details for display and annotation.

        Supports both URL parameter and query parameter access patterns:
        - /api/pdf/sensitivemeta/123/ (URL parameter)
        - /api/pdf/sensitivemeta/?id=123 (query parameter - for backward compatibility)
        - /api/pdf/sensitivemeta/ (list all - returns empty list instead of 400)

        Returns detailed information suitable for user verification.
      parameters:
      - in: path
        name: annotation_id
        schema:
          type: integer
        required: true
      tags:
      - save-anonymization-annotation-video
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: save_anonymization_annotation_video_partial_update
      description: |-
        Update SensitiveMeta fields including verification state.

        Accepts partial updates for any field in SensitiveMetaUpdateSerializer.
        Special handling for verification state changes.
      parameters:
      - in: path
        name: annotation_id
        schema:
          type: integer
        required: true
      tags:
      - save-anonymization-annotation-video
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/secure-file-urls/:
    post:
      operationId: secure_file_urls_create
      description: |-
        API-Endpunkt für sichere URL-Generierung
        POST /api/secure-file-urls/
      tags:
      - secure-file-urls
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/upload/:
    post:
      operationId: upload_create
      description: Handle file upload and create processing job.
      tags:
      - upload
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/upload/{id}/status:
    get:
      operationId: upload_status_retrieve
      description: Return the current status of an upload job.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - upload
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/validate-secure-url/:
    get:
      operationId: validate_secure_url_retrieve
      description: |-
        Validiert eine sichere URL
        GET /api/validate-secure-url/?url={url}
      tags:
      - validate-secure-url
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/video-examinations/:
    get:
      operationId: video_examinations_retrieve
      description: |-
        ViewSet for Video Examination CRUD operations
        Handles POST and PATCH for video examinations at timestamps
      tags:
      - video-examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: video_examinations_create
      description: |-
        Create a new video examination
        POST /api/examinations/

        Expected payload:
        {
            "videoId": 123,
            "timestamp": 45.5,
            "examinationTypeId": 1,
            "findingId": 2,
            "locationClassificationId": 3,
            "locationChoiceId": 4,
            "morphologyClassificationId": 5,
            "morphologyChoiceId": 6,
            "interventionIds": [7, 8],
            "notes": "Sample notes"
        }
      tags:
      - video-examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '201':
          description: No response body
  /api/video-examinations/{id}/:
    get:
      operationId: video_examinations_retrieve_2
      description: |-
        ViewSet for Video Examination CRUD operations
        Handles POST and PATCH for video examinations at timestamps
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - video-examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: video_examinations_update
      description: |-
        Update an existing video examination
        PATCH /api/examinations/{id}/
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - video-examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: video_examinations_partial_update
      description: |-
        ViewSet for Video Examination CRUD operations
        Handles POST and PATCH for video examinations at timestamps
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - video-examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: video_examinations_destroy
      description: |-
        Delete a video examination
        DELETE /api/examinations/{id}/
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - video-examinations
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/video-segments/:
    get:
      operationId: video_segments_retrieve
      description: |-
        Handles creation and retrieval of labeled video segments.

        POST creates a new labeled video segment with validated data and returns the created segment. GET lists all labeled video segments, optionally filtered by video ID and/or label ID. Returns appropriate error responses for invalid input or missing referenced objects.
      tags:
      - video-segments
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: video_segments_create
      description: |-
        Handles creation and retrieval of labeled video segments.

        POST creates a new labeled video segment with validated data and returns the created segment. GET lists all labeled video segments, optionally filtered by video ID and/or label ID. Returns appropriate error responses for invalid input or missing referenced objects.
      tags:
      - video-segments
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/video-segments/{segment_id}/:
    get:
      operationId: video_segments_retrieve_2
      description: |-
        Handles retrieval, update, and deletion of a single labeled video segment.

        Supports:
        - GET: Returns details of the specified video segment.
        - PUT: Partially updates the segment with validated data.
        - DELETE: Removes the segment from the database.

        Returns appropriate HTTP status codes and error messages for invalid data or exceptions.
      parameters:
      - in: path
        name: segment_id
        schema:
          type: integer
        required: true
      tags:
      - video-segments
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: video_segments_update
      description: |-
        Handles retrieval, update, and deletion of a single labeled video segment.

        Supports:
        - GET: Returns details of the specified video segment.
        - PUT: Partially updates the segment with validated data.
        - DELETE: Removes the segment from the database.

        Returns appropriate HTTP status codes and error messages for invalid data or exceptions.
      parameters:
      - in: path
        name: segment_id
        schema:
          type: integer
        required: true
      tags:
      - video-segments
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: video_segments_partial_update
      description: |-
        Handles retrieval, update, and deletion of a single labeled video segment.

        Supports:
        - GET: Returns details of the specified video segment.
        - PUT: Partially updates the segment with validated data.
        - DELETE: Removes the segment from the database.

        Returns appropriate HTTP status codes and error messages for invalid data or exceptions.
      parameters:
      - in: path
        name: segment_id
        schema:
          type: integer
        required: true
      tags:
      - video-segments
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: video_segments_destroy
      description: |-
        Handles retrieval, update, and deletion of a single labeled video segment.

        Supports:
        - GET: Returns details of the specified video segment.
        - PUT: Partially updates the segment with validated data.
        - DELETE: Removes the segment from the database.

        Returns appropriate HTTP status codes and error messages for invalid data or exceptions.
      parameters:
      - in: path
        name: segment_id
        schema:
          type: integer
        required: true
      tags:
      - video-segments
      security:
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/video/{video_id}/reimport/:
    post:
      operationId: video_reimport_create
      description: |-
        Re-import a video file to regenerate SensitiveMeta and other metadata.
        Instead of creating a new video, this updates the existing one.
      parameters:
      - in: path
        name: video_id
        schema:
          type: integer
        required: true
      tags:
      - video
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/video/sensitivemeta/{sensitive_meta_id}/:
    get:
      operationId: video_sensitivemeta_retrieve
      description: |-
        Retrieve SensitiveMeta details for display and annotation.

        Supports both URL parameter and query parameter access patterns:
        - /api/pdf/sensitivemeta/123/ (URL parameter)
        - /api/pdf/sensitivemeta/?id=123 (query parameter - for backward compatibility)
        - /api/pdf/sensitivemeta/ (list all - returns empty list instead of 400)

        Returns detailed information suitable for user verification.
      parameters:
      - in: path
        name: sensitive_meta_id
        schema:
          type: integer
        required: true
      tags:
      - video
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: video_sensitivemeta_partial_update
      description: |-
        Update SensitiveMeta fields including verification state.

        Accepts partial updates for any field in SensitiveMetaUpdateSerializer.
        Special handling for verification state changes.
      parameters:
      - in: path
        name: sensitive_meta_id
        schema:
          type: integer
        required: true
      tags:
      - video
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/videos/:
    get:
      operationId: videos_list
      description: |-
        Returns a JSON response with all video metadata and available labels.

        The response includes serialized lists of all videos and labels in the database.
      tags:
      - videos
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoFileList'
          description: ''
  /api/videos/{id}/:
    get:
      operationId: videos_retrieve
      description: |-
        Retrieves detailed metadata for a specific video as a JSON response.

        Returns:
            JSON representation of the requested video's metadata.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this video file.
        required: true
      tags:
      - videos
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoFileList'
          description: ''
  /api/videos/{id}/stream/:
    get:
      operationId: videos_stream_retrieve
      description: Streams the raw video file for the specified video with HTTP range
        and CORS support.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this video file.
        required: true
      tags:
      - videos
      security:
      - cookieAuth: []
      - {}
      responses:
        '200':
          content: {}
          description: ''
components:
  schemas:
    Center:
      type: object
      description: Serializer für Center-Modell
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    Examination:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        findings:
          type: string
          readOnly: true
        examination_types:
          type: string
          readOnly: true
      required:
      - examination_types
      - findings
      - id
      - name
    FileOverview:
      type: object
      description: |-
        Polymorphic "union" serializer – we normalise both model types
        (VideoFile, RawPdfFile) into the data structure the Vue store needs.
      properties:
        id:
          type: integer
          readOnly: true
        filename:
          type: string
          readOnly: true
        mediaType:
          type: string
          readOnly: true
        anonymizationStatus:
          type: string
          readOnly: true
        annotationStatus:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        text:
          type: string
          readOnly: true
        anonymizedText:
          type: string
          readOnly: true
      required:
      - annotationStatus
      - anonymizationStatus
      - anonymizedText
      - createdAt
      - filename
      - id
      - mediaType
      - text
    Finding:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
          nullable: true
        classifications:
          type: string
          readOnly: true
        location_classifications:
          type: string
          readOnly: true
        morphology_classifications:
          type: string
          readOnly: true
      required:
      - classifications
      - id
      - location_classifications
      - morphology_classifications
      - name
    FindingClassification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/FindingClassificationChoice'
          readOnly: true
        classification_types:
          type: array
          items:
            type: integer
      required:
      - choices
      - classification_types
      - id
      - name
    FindingClassificationChoice:
      type: object
      description: |-
        Serializer for the FindingClassificationChoice model.

        Serializes the following fields:
            - id: Unique identifier of the classification choice.
            - name: Name of the classification choice.
            - description: Description of the classification choice.
            - subcategories: Related subcategories for further classification.
            - numerical_descriptors: Associated numerical descriptors for the classification choice.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        subcategories: {}
        numerical_descriptors: {}
      required:
      - id
      - name
    Gender:
      type: object
      description: Serializer für Gender-Modell
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        abbreviation:
          type: string
          nullable: true
          maxLength: 255
        description:
          type: string
          nullable: true
      required:
      - id
      - name
    PaginatedFileOverviewList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FileOverview'
    PatchedPatient:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        dob:
          type: string
          format: date
          nullable: true
        gender:
          type: string
          nullable: true
        center:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
          maxLength: 255
        phone:
          type: string
          nullable: true
          maxLength: 255
        patient_hash:
          type: string
          nullable: true
          maxLength: 255
        is_real_person:
          type: boolean
        age:
          type: string
          readOnly: true
    PatchedPatientExamination:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        patient:
          type: string
          writeOnly: true
          description: Patient Hash (z.B. 'patient_2')
        patient_data:
          type: string
          readOnly: true
        examination:
          type: string
          nullable: true
        date_start:
          type: string
          format: date
          nullable: true
        date_end:
          type: string
          format: date
          nullable: true
        hash:
          type: string
          readOnly: true
        patient_name:
          type: string
          readOnly: true
        examination_name:
          type: string
          readOnly: true
    PatchedPatientFinding:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        patient_examination:
          type: integer
        finding:
          type: integer
        video_segments:
          type: array
          items:
            type: integer
          readOnly: true
        interventions:
          type: array
          items:
            type: integer
          readOnly: true
        classifications:
          type: array
          items:
            type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
          default: true
          description: Deaktiviert statt gelöscht für Audit-Trail
    Patient:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        dob:
          type: string
          format: date
          nullable: true
        gender:
          type: string
          nullable: true
        center:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
          maxLength: 255
        phone:
          type: string
          nullable: true
          maxLength: 255
        patient_hash:
          type: string
          nullable: true
          maxLength: 255
        is_real_person:
          type: boolean
        age:
          type: string
          readOnly: true
      required:
      - age
      - first_name
      - id
      - last_name
    PatientExamination:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        patient:
          type: string
          writeOnly: true
          description: Patient Hash (z.B. 'patient_2')
        patient_data:
          type: string
          readOnly: true
        examination:
          type: string
          nullable: true
        date_start:
          type: string
          format: date
          nullable: true
        date_end:
          type: string
          format: date
          nullable: true
        hash:
          type: string
          readOnly: true
        patient_name:
          type: string
          readOnly: true
        examination_name:
          type: string
          readOnly: true
      required:
      - examination_name
      - hash
      - id
      - patient
      - patient_data
      - patient_name
    PatientFinding:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        patient_examination:
          type: integer
        finding:
          type: integer
        video_segments:
          type: array
          items:
            type: integer
          readOnly: true
        interventions:
          type: array
          items:
            type: integer
          readOnly: true
        classifications:
          type: array
          items:
            type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
          default: true
          description: Deaktiviert statt gelöscht für Audit-Trail
      required:
      - classifications
      - created_at
      - finding
      - id
      - interventions
      - is_active
      - patient_examination
      - updated_at
      - video_segments
    VideoFileList:
      type: object
      description: |-
        Minimal serializer to return only basic video information
        for the video selection dropdown in Vue.js.
      properties:
        id:
          type: integer
          readOnly: true
        original_file_name:
          type: string
          nullable: true
          maxLength: 255
        status:
          oneOf:
          - enum:
            - completed
            type: string
          - enum:
            - in_progress
            type: string
          - enum:
            - available
            type: string
          description: |-
            Determine the processing status of a video file as 'completed', 'in_progress', or 'available'.

            Returns:
                str: The video's status based on its processing state.

            Raises:
                ValueError: If the video's state cannot be accessed.
          readOnly: true
        assignedUser:
          type: string
          readOnly: true
        anonymized:
          type: string
          readOnly: true
      required:
      - anonymized
      - assignedUser
      - id
      - status
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
